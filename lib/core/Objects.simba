
type
  TReflectObject = record(TReflectPointer)
{$IFNDEF CODEINSIGHT}
    ObjType: TObjectType;
    Id: Integer;
    Name: string;
    Tile: TTile;
{$ENDIF}
end;

  TReflectObjectArray = array of TReflectObject;

procedure TReflectObjectArray.Init(_ObjType: TObjectType; _Id: Integer);
begin
  if Length(Self) = 0 then
    SetLength(Self, 1);
  Self[0].ObjType := _ObjType;
  Self[0].Id := _Id;
end;

procedure TReflectObjectArray.Init(_ObjType: TObjectType; _Name: string);
  overload;
begin
  if Length(Self) = 0 then
    SetLength(Self, 1);
  Self[0].ObjType := _ObjType;
  Self[0].Name := _Name;
end;

procedure TReflectObjectArray.Init(_ObjType: TObjectType); overload;
begin
  if Length(Self) = 0 then
    SetLength(Self, 1);
  Self[0].ObjType := _ObjType;
  Self[0].Id := 0;
  Self[0].Name := '';
end;

procedure TReflectObject.Init(_ObjType: TObjectType; _Id: Integer);
begin
  Self.ObjType := _ObjType;
  Self.Id := _Id;
end;

procedure TReflectObject.Init(_ObjType: TObjectType; _Name: string); overload;
begin
  Self.ObjType := _ObjType;
  Self.Name := _Name;
end;

procedure TReflectObject.Init(_ObjType: TObjectType); overload;
begin
  Self.ObjType := _ObjType;
  Self.Id := 0;
  Self.Name := '';
end;

{*Credit Widget, Modified by Lordsaturn*}
procedure TReflectObjectArray.Sort;
var
  I, C, L: integer;
  Tpa: TPointArray;
  Temp: TReflectObjectArray;
begin
  L := GetArrayLength(Self);
  if L < 1 then
    Exit;
  SetArrayLength(Tpa, L);
  SetArrayLength(Temp, L);
  for I := 0 to L - 1 do
    Tpa[I] := Self[I].Tile;
  SortTPAFrom(Tpa, Reflect.Internals.GetGlobalTile);
  for I := 0 to L - 1 do
    for C := 0 to L - 1 do
      if (Tpa[I].Y = Self[C].Tile.Y) and (Tpa[I].X = Self[C].Tile.X) then
        Temp[I] := Self[C];
  Self := Temp;
end;

function TReflectObject.GetTile: TTile;
var
  LocalTile: TTile;
begin
  LocalTile := Point(Reflect.Smart.GetFieldInt(
    Self.Reference, Self.ObjType.LocalX), Reflect.Smart.GetFieldInt(
    Self.Reference, Self.ObjType.LocalY));
  Result := Point(LocalTile.X + Reflect.Internals.BaseX, LocalTile.Y +
    Reflect.Internals.BaseY);
end;

function TReflectObject.GetOffset: TTile;
var
  LocalTile: TTile;
begin
  if Self.ObjType.Index <> ObjGame.Index then
  begin
    Reflect.Logger.Warn('Only ObjGame has an Offset @.GetOffset');
    Exit(Point(-1, -1));
  end;
  LocalTile := Point(Reflect.Smart.GetFieldInt(
    Self.Reference, Self.ObjType.OffsetX), Reflect.Smart.GetFieldInt(
    Self.Reference, Self.ObjType.OffsetY));
  Result := Point(LocalTile.X + Reflect.Internals.BaseX, LocalTile.Y +
    Reflect.Internals.BaseY);
end;

function TReflectObject.GetOrientation: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.Reference, Self.ObjType.Orientation);
end;

function TReflectObject.GetId: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.Reference, Self.ObjType.Id);
  Result := (Result shr 14) and $7fff;
end;

function TReflectObject.GetName: string;
var
  Id: Integer;
  Line: string;
begin
  Id := Self.GetId;
  Line := ObjectCache.GetStrings(Id);
  Result := Between('''name'': ''', ''',', Line);
end;

function TReflectObject.GetHeight: Integer;
var
  Id: Integer;
  Line: string;
begin
  Id := Self.GetId;
  Line := ObjectCache.GetStrings(Id);
  Result := StrToInt(Between('height'': ', ',', Line));
end;

function TReflectObject.GetActions: TStringArray;
var
  Id: Integer;
  Line, Temp: string;
begin
  Id := Self.GetId;
  Line := ObjectCache.GetStrings(Id);
  SetLength(Result, 5);
  Temp := Between('''actions'': [''', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectObject.GetMainScreenPoint: TPoint;
var
  OffsetX, OffsetY, XShift, YShift: Extended;
  Tile: TPoint;
begin
  if Self.ObjType.Index <> ObjGame.Index then
    Exit(Self.GetTile);
  Tile := Self.GetTile;
  OffsetX := (Tile.X + Self.GetOffset.X) / 2;
  OffsetY := (Tile.Y + Self.GetOffset.Y) / 2;
  XShift := Frac(OffsetX) * 128;
  YShift := Frac(OffsetY) * 128;
  if Self.GetOffset.X mod 2 = 0 then
    XShift := XShift * -1;
  if Self.GetOffset.Y mod 2 = 0 then
    YShift := YShift * -1;
  Result := Reflect.Tiles.TileToMs(Point(Round(OffsetX), Round(OffsetY)),
    Round(XShift), Round(YShift), 0);
end;

{$IFNDEF CODEINSIGHT}
procedure TReflectObject.GetObject(Iteration: Integer; _Tile: TTile);
var
  Id: Integer;
  Temp: TReflectObject;
begin
  if (Self.ObjType.Index <> ObjGame.Index) then
  begin
    Reflect.Mem.GetObject(ckSceneTile, ckObject, Self.ObjType.SceneObject,
      Iteration, Iteration);
    Self.Reference := HookCache[ckObject][Iteration];
    Self.Tile := _Tile;
  end
  else
  begin
    Reflect.Mem.GetObjectArray(ckSceneTile, ckObject,
      Self.ObjType.SceneObject, Iteration, Iteration, 0);
    Self.Reference := HookCache[ckObject][Iteration];
    Self.Tile := _Tile;
  end;
end;

procedure TReflectObjectArray.GetAll(Distance: Integer);
var
  Multi, BaseX, BaseY, X, Y, I, Count, Plane, HighX, HighY: integer;
  Temp: TReflectObject;
  Position: TPoint;
  ObjectHook, SceneHook: THook;
begin
  if not Reflect.Mem.IsNull(ckObject) then
    Reflect.Mem.FreeObjects(ckObject, True);
  Position := Reflect.Internals.GetGlobalTile;
  Distance := Round(Distance / 2);
  if HookCache[TCacheKey.ckRegion][0] = 0 then
    Reflect.Mem.GetObject(ckNull, ckRegion, Client_Region, 0, 0);
  BaseX := Reflect.Internals.BaseX;
  BaseY := Reflect.Internals.BaseY;
  Position := Point(Position.X - BaseX, Position.Y - BaseY);
  Plane := Reflect.Tiles.GetPlane;
  HighX := Position.X + Distance;
  HighY := Position.Y + Distance;
  if HighX > 103 then
    HighX := 103;
  if HighY > 103 then
    HighY := 103;
  SetLength(Self, 10817);
  for X := Position.X - Distance to HighX do
    for Y := Position.Y - Distance to HighY do
    begin
      Temp.ObjType := Self[0].ObjType;
      Reflect.Mem.Get3DObject(ckRegion, ckSceneTile, Region_SceneTiles,
        Count, 0, Plane, X, Y);
      Temp.GetObject(Count, Point(BaseX + X, BaseY + Y));
      Inc(Count);
      if Temp.Reference = 0 then
        Continue;
      Self[I] := Temp;
      Inc(I);
    end;
    SetLength(Self, I);
    Reflect.Mem.FreeObjects(ckSceneTile, Count);
    Self.Sort;
end;
{$ENDIF}

procedure TReflectObject.GetAt(_Tile: TTile);
var
  ObjectHook, SceneHook: THook;
  Multi, BaseX, BaseY, Plane: Integer;
  Temp: TReflectObject;
begin
  if (HookCache[ckObject][0] <> 0) then
    Reflect.Mem.FreeObjects(ckObject, True);
  BaseX := Reflect.Internals.BaseX;
  BaseY := Reflect.Internals.BaseY;
  Plane := Reflect.Tiles.GetPlane;
  if HookCache[TCacheKey.ckRegion][0] = 0 then
    Reflect.Mem.GetObject(ckNull, ckRegion, Client_Region, 0, 0);
  Reflect.Mem.Get3DObject(ckRegion, ckSceneTile, Region_SceneTiles, 0, 0, Plane,
    _Tile.X - BaseX, _Tile.Y - BaseY);
  Self.GetObject(0, _Tile);
  Reflect.Mem.FreeObjects(ckSceneTile, False);
end;

procedure TReflectObjectArray.Get(Distance: Integer = 103);
var
  Temp, Temp1: TReflectObjectArray;
  I, H, T: integer;
begin
  if Length(Self) = 0 then
  begin
    Reflect.Logger.Warn('TReflectObjectArray is not initialized @.Get');
    Exit;
  end;
  if (Self[0].Id = 0) and (Self[0].Name = '')then
  begin
    Self.GetAll(Distance);
    Exit;
  end;
  Temp := Self;
  Temp.GetAll(Distance);
  if Length(Temp) = 0 then
    Exit;
  if Self[0].Id = 0 then
  begin
    if Self[0].ObjType.Index <> ObjGame.Index then
    begin
      Reflect.Logger.Warn('Only ObjGame can be searched by name @.Get');
      Exit;
    end;
    H := High(Temp);
    SetLength(Temp1, H + 1);
    for I := 0 to H do
    begin
      if (Temp[I].GetName = Self[0].Name) then
      begin
        Temp1[T] := Temp[I];
        Inc(T);
      end;
    end;
  end
  else
  begin
    H := High(Temp);
    Setlength(Temp1, H + 1);
    for I := 0 to H do
    begin
      if (Temp[I].GetId = Self[0].Id) then
      begin
        Temp1[T] := Temp[I];
        Inc(T);
      end;
    end;
  end;
  Setlength(Temp1, T);
  Self := Temp1;
  Self.Sort;
end;

function TReflectObject.Find(Distance: Integer = 103): Boolean;
var
  Temp: TReflectObjectArray;
begin
  if (Self.Name = '') and (Self.Id = 0) then
  begin
    Reflect.Logger.Warn('TReflectObject is not initialized @ .Find');
    Exit;
  end;
  if Self.Name = '' then
    Temp.Init(Self.ObjType, Self.Id);
  if Self.Id = 0 then
  begin
    if Self.ObjType.Index <> ObjGame.Index then
    begin
      Reflect.Logger.Warn('Only ObjGame can be searched by name @.Find');
      Exit(False);
    end;
    Temp.Init(Self.ObjType, Self.Name);
  end;
  Temp.Get(Distance);
  if Length(Temp) = 0 then
    Exit;
  Temp.Sort;
  if Reflect.Tiles.NearTile(Temp[0].GetTile, Distance) then
  begin
    Result := True;
    Self := Temp[0];
  end;
end;

procedure TReflectionInternals.SetupObjects;
begin
  ObjGame.Index := 1;
  ObjGame.Id := GameObject_ID;
  ObjGame.Flags := GameObject_Flags;
  ObjGame.Plane := GameObject_Plane;
  ObjGame.Height := GameObject_Height;
  ObjGame.Render := GameObject_Render;
  ObjGame.Orientation := GameObject_Orientation;
  ObjGame.LocalX := GameObject_LocalX;
  ObjGame.LocalY := GameObject_LocalY;
  ObjGame.OffsetX := GameObject_OffsetX;
  ObjGame.OffsetY := GameObject_OffsetY;
  ObjGame.SceneObject := SceneTile_GameObject;
  ObjWallDecoration.Index := 2;
  ObjWallDecoration.Id := WallDecoration_Id;
  ObjWallDecoration.Flags := WallDecoration_Flags;
  ObjWallDecoration.Plane := WallDecoration_Plane;
  ObjWallDecoration.Height := WallDecoration_Height;
  ObjWallDecoration.Render := WallDecoration_Renderable;
  ObjWallDecoration.Orientation := WallDecoration_Orientation;
  ObjWallDecoration.LocalX := WallDecoration_LocalX;
  ObjWallDecoration.LocalY := WallDecoration_LocalY;
  ObjWallDecoration.RelativeX := WallDecoration_RelativeX;
  ObjWallDecoration.RelativeY := WallDecoration_RelativeY;
  ObjFloorDecoration.Index := 3;
  ObjFloorDecoration.Id := WallDecoration_Id;
  ObjFloorDecoration.Flags := FloorDecoration_Flags;
  ObjFloorDecoration.Plane := FloorDecoration_Plane;
  ObjFloorDecoration.Render := FloorDecoration_Render;
  ObjFloorDecoration.LocalX := FloorDecoration_LocalX;
  ObjFloorDecoration.LocalY := FloorDecoration_LocalY;
  ObjBoundary.Index := 4;
  ObjBoundary.Id := BoundaryObject_Id;
  ObjBoundary.Flags := BoundaryObject_Flags;
  ObjBoundary.Plane := BoundaryObject_Plane;
  ObjBoundary.Height := BoundaryObject_Height;
  ObjBoundary.Render := BoundaryObject_Render;
  ObjBoundary.Orientation := BoundaryObject_Orientation;
  ObjBoundary.LocalX := BoundaryObject_LocalX;
  ObjBoundary.LocalY := BoundaryObject_LocalY;
end;


