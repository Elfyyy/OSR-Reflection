(*
Math
====

Supporting math functions.

.. contents::

*)
{$IFNDEF AL}
{$IFNDEF SRL5}
const
  MATH_PI = 3.14159265358979320;
  MATH_2PI = MATH_PI * 2.0;
  MATH_PIOVER2 = MATH_PI / 2.0;
  MATH_PIOVER3 = MATH_PI / 3.0;
  MATH_PIOVER4 = MATH_PI / 4.0;
  MATH_PIOVER6 = MATH_PI / 6.0;

var
   SineArray, Cosearray: array[0..360] of Extended;

 type
  TVector = record
    x, y: Extended;
    m: Extended;
  end;

var
  srl_GaussRand: function: Extended;
  srl_GaussDev_Range, srl_GaussDev_Point: Extended;

const
  __gauss_norm_0 = 0.029899776;
  __gauss_norm_1 = 0.008355968;
  __gauss_norm_2 = 0.076542912;
  __gauss_norm_3 = 0.252408784;
  __gauss_norm_4 = 3.949846138;
{$ENDIF SRL5}
{$ENDIF AL}

(*
LoadCoSineArrays
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure LoadCoSineArrays;

Load default sin/cos values. Used internally for SRL

.. note::

    by Mutant Squirrle

Example:

.. code-block:: pascal

*)
procedure TReflectionMath.LoadCoSineArrays;
var
  i: Integer;
  pi_const: extended;
begin
  pi_const := Pi; // not necessary, but might as well.
  for i := 0 to 360 do
  begin
    Sinearray[i] := Sin(i * pi_const / 180.0);
    Cosearray[i] := Cos(i * pi_const / 180.0);
  end;
end;

(*
AngleBetween
~~~~~~~~~~~~

.. code-block:: pascal

    function AngleBetween(v1, v2: TVector): Extended;

Calculates the angle between two TVector records. This is returned in radians
(normalized between (0, 2Pi]).

.. note::

    by readysteadygo

Example:

.. code-block:: pascal

*)
function TReflectionMath.AngleBetween(v1, v2: TVector): Extended;
var
  a1, a2: Extended;
begin
  a1 := ArcTan2(v1.y, v1.x);
  a2 := ArcTan2(v2.y, v2.x);

  Result := fixRad(a1 - a2)
end;


(*
Normalize
~~~~~~~~~

.. code-block:: pascal

    procedure Normalize(var vect: TVector);

Converts a TVector to normal TVector (|v| = 1).

.. note::

    by readysteadygo

Example:

.. code-block:: pascal

*)
procedure TReflectionMath.Normalize(var vect: TVector);
begin
  vect.x := vect.x / vect.m;
  vect.y := vect.y / vect.m;
  vect.m := 1;
end;

(*
CreateVector
~~~~~~~~~~~~

.. code-block:: pascal

    function CreateVector(Origin, vPoint: TPoint; NormalizeV: Boolean): TVector;

Creates a `TVector` object. If NormalzseV is true, will set |v| = 1.

.. note::

    by readysteadygo

Example:

.. code-block:: pascal

*)
function TReflectionMath.CreateVector(Origin, vPoint: TPoint; NormalizeV: Boolean): TVector;
begin
  Result.x := vPoint.x - Origin.x;
  Result.y := 0 - (vPoint.y - Origin.y); // inverts y axis as well
  Result.m := Sqrt(Sqr(Result.x) + Sqr(Result.y));
  if (NormalizeV) then
    Normalize(Result);
end;


(*
GetSplitPt
~~~~~~~~~~

.. code-block:: pascal

    function GetSplinePt(Points: TPointArray; Theta: Extended): TPoint;

Returns the point on a spline, defined by control points Points, at Theta

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
function TReflectionMath.GetSplinePt(Points: TPointArray; Theta: Extended): TPoint;
var
  i, n: Integer;
  XTemp, YTemp: Extended;
begin
  n := GetArrayLength(Points) - 1;
  for i := 0 to n do
  begin
    XTemp := XTemp + (BinCoe(n, i) * Points[i].x * Pow((1 - Theta), n - i) *
      Pow(Theta, i));
    YTemp := YTemp + (BinCoe(n, i) * Points[i].y * Pow((1 - Theta), n - i) *
      Pow(Theta, i));
  end;
  Result.x := Round(XTemp);
  Result.y := Round(YTemp);
end;

{

Helper method for cal_normal_random. Does polynomial calculation using the
`Horner Scheme`_

..http://en.wikipedia.org/wiki/Horner_scheme

}
function TReflectionMath.__gauss_poly(r, rsqr: Extended): Extended;
begin
  Result := __gauss_norm_0*rsqr + __gauss_norm_1;
  Result := Result*rsqr + __gauss_norm_2;
  Result := Result*rsqr + __gauss_norm_3;
  Result := Result*rsqr + __gauss_norm_4;
  Result := Result*r;
end;

(*

n2_gauss
~~~~~~~~

.. code-block:: pascal

    function n2_gauss: Extended;

Calculates a standard normal value (N(0, 1)).

By definition, 68.2% of points will lie within +/- 1*sigma, 95.4% within +/- 2.

.. note::

    by: Nava2

*)
function TReflectionMath.n2_gauss: Extended;
var
  r: Extended;
  i: Integer;
begin
  r := 0.0;
  for i := 0 to 11 do
    r := r + (random(High(Integer))*1.0)/High(Integer);

  r := (r-6.0)/4.0 ;
  result := Reflect.Math.__gauss_poly(r, r*r);
end;

(*

GaussMarsPolar
~~~~~~~~~~~~~~

.. code-block:: pascal

    function GaussMarsPolar: Extended;

Calculates a standard normal value (N(0, 1]).

By definition, 68.2% of points will lie within +/- 1*sigma, 95.4% within +/- 2.

.. note::
    Please use `srl_GaussRand` instead of this function directly, feel free to
    set `srl_GaussRand` to this function if you choose.
    Currently, this is the default.

.. note::
    by: BenLand100

*)
function GaussMarsPolar1: Extended;
var
  Temp: Extended;
begin
  Temp := sqrt(-2.0 * ln(RandomE)) * cos(2.0 * PI * RandomE);
  Result := Temp;
end;

(*

SetupGauss
~~~~~~~~~~

.. code-block:: pascal

    procedure setupGauss;

Sets up the necessary constants for the gaussian functions used in the Gaussian
math functions internally to SRL.

.. note::

   by: SRL Development Team

*)
procedure TReflectionMath.setupGauss;
begin
  srl_GaussDev_Point := 0.4;
  srl_GaussDev_Range := 0.3;
  srl_GaussRand := @GaussMarsPolar1;
end;


(*

GaussRand
~~~~~~~~~

..code-block:: pascal

    function GaussRand(mean, dev: Extended): Extended;

Calculates a normally distributed point around mean (u) with a standard
deviation of dev (o).

..note::

   by: Nava2

Example:

..code-block:: pascal

    // shooting arrows simulation:
    pt := Point(GaussRand(center.x, 0.5), GaussRand(center.y, 0.5));
    WriteLn(Format('Hit the target at (%d, %d).', [pt.x, pt.y]));

*)

function TReflectionMath.GaussRand(mean, dev: Extended): Extended;
begin
  result := mean + dev*srl_GaussRand;
end;


(*

Gauss_Point
~~~~~~~~~~~

.. code-block:: pascal

    procedure Gauss_Point(cX, cY: Integer; sAngle, eAngle: Extended; maxRad: Integer; out oX, oY: Integer);

Calculates a point about cX, cY with radius maxRad. The sangle and eangle are
in radians. The point is returned in the reference parameters oX, oY.

.. note::

    by: Nava2

Example:

.. code-block:: pascal

    var
      gX, gY: Integer;
    // get a gaussian pt in a circle:
    Gauss_Point(MMCX, MMCY, 0, math_2PI, MMX2-MMCX, gX, gY);
    WriteLn(Format("gX, gY -> %d, %d", gX, gY);

*)

procedure TReflectionMath.Gauss_Point(cX, cY: Integer; sAngle, eAngle: Extended; maxRad: Integer; out oX, oY: Integer);
var
  angle: Extended;
  radius: Extended;
  xShift, yShift: Integer;
begin

  if (eAngle < sAngle) then
    swap(eAngle, sAngle);

  { random angle about the center }
  angle := sAngle + (eAngle-sAngle)*srl_GaussRand/2.0;

  { get normal pt about zero, where 68% lie within .5*maxRad }
  radius := Reflect.Math.GaussRand(maxRad,maxRad*srl_GaussDev_Point) - maxRad;


  { the shifting distance based on the radius and angle (both rand) }
  xShift := round(radius * Cos(angle));
  yShift := round(radius * Sin(angle));

  oX := cX + xShift;
  oY := cY + yShift;
end;

(*
GaussRange
~~~~~~~~~~

.. code-block:: pascal

    function GaussRange(minI, maxI: Extended): Extended;

Returns a number between minI and maxI that is normally distributed in the range.

.. note::

  by: Nava2

Example:

.. code-block:: pascal

    randMean := GaussRange(0, 20);

*)
function TReflectionMath.GaussRange(minI, maxI: Extended): Extended;
var
  valid: Boolean;
  mean: Extended;
  dev: Extended;
  t: Integer;
begin
  { calculate the mean }
  mean := (maxI+minI)/2.0;
  dev  := abs(maxI-minI)/2.0 * srl_GaussDev_Range;

  t := 0;
  while ((not valid) and (t < 100)) do
  begin
    Result := Reflect.Math.GaussRand(mean, dev);
    valid := ((Result >= minI) and (Result <= MaxI));

    inc(t);
  end;

end;

(*

iGaussRange
~~~~~~~~~~~

.. code-block:: pascal

    function iGaussRange(minI, maxI: Integer): Integer;

See `GaussRange` for more detail. Same function, but with integers.

.. note::

    by: Nava2

*)
function TReflectionMath.iGaussRange(minI, maxI: Integer): Integer;
begin
  Result := Round(Reflect.Math.GaussRange(minI, maxI));
end;

(*

GaussRandom
~~~~~~~~~~~

.. code-block:: pascal

    function GaussRandom(maxExt: Integer): Integer;

Computes a normally distributed number in [0, maxExt). Thus, it behaves like
Random would be expected to. But normally distributed about maxExt/2.

It is a wrapper for `iGaussRange`.

.. note::

    by Nava2

Example:

.. code-block:: pascal

*)
function TReflectionMath.GaussRandom(maxExt: Integer): Integer;
begin
  Result := Reflect.Math.iGaussRange(0, maxExt-1);
end;

(*

GaussBox
~~~~~~~~

.. code-block:: pascal

    procedure GaussBox(out px, py: Integer; x1, y1, x2, y2: Integer);

Calculates a point normally distributed from the center of the passed box. It
checks for outlying points and will regenerate points if necessary.

.. note::

    by: Nava2

Example:

.. code-block:: pascal

    var
      gX, gY: Integer;

    // get a gaussian pt in a circle:
    Gauss_Box(gX, gY, MMX1, MMY1, MMX2, MMY2);
    WriteLn(Format("gX, gY -> %d, %d", gX, gY);

*)

procedure TReflectionMath.GaussBox(out px, py: Integer; x1, y1, x2, y2: Integer);
begin
  px := Reflect.Math.iGaussRange(x1, x2);
  py := Reflect.Math.iGaussRange(y1, y2);

  if (not PointInBox(Point(px, py), IntToBox(x1, y1, x2, y2))) then
  begin
    Writeln('[GaussBox] Point invalid (%d, %d)');
    Exit;
  end;
end;

(*
MakeSplinePath
~~~~~~~~~~~~~~

.. code-block:: pascal

    function MakeSplinePath(Points: TPointArray; ThetaInc: Extended): TPointArray;

Returns a spline, defined by control points Points, incrementing theta by
ThetaInc

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
function TReflectionMath.MakeSplinePath(Points: TPointArray; ThetaInc: Extended): TPointArray;
var
  i: Integer;
  t: Extended;
  temp, last: TPoint;
  done: Boolean;
begin
  repeat
    if t >= 1 then
    begin
      t := 1;
      done := True;
    end;
    temp := GetSplinePt(Points, t);
    if ((temp.x <> last.x) and (temp.y <> last.y)) then
    begin
      i := i + 1;
      SetArrayLength(Result, i);
      Result[i - 1] := temp;
      last := temp;
    end;
    t := t + ThetaInc;
  until (done)
end;

(*
MidPoints
~~~~~~~~~

.. code-block:: pascal

    function MidPoints(Path: TPointArray; MaxDist: Integer): TPointArray;

Adds midpoints to Path so no distance on it is greater than MaxDist

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
function TReflectionMath.MidPoints(Path: TPointArray; MaxDist: Integer): TPointArray;
var
  i, c: Integer;
  last: TPoint;
  done: Boolean;
begin
  if (getarraylength(path) > 0) then
  begin
    repeat
      last := Path[0];
      done := True;
      for i := 1 to GetArrayLength(Path) - 1 do
      begin
        if Sqrt(Pow((Path[i].x - last.x), 2) + Pow((Path[i].y - last.y), 2)) >
          MaxDist then
        begin
          done := False;
          SetArrayLength(Path, GetArrayLength(Path) + 1);
          for c := GetArrayLength(Path) - 1 downto i + 1 do
          begin
            Path[c] := Path[c - 1];
          end;
          Path[i].x := Round((last.x + Path[i + 1].x) / 2);
          Path[i].y := Round((last.y + Path[i + 1].y) / 2);
        end;
        last := Path[i];
      end;
    until (done);
  end;
  Result := Path;
end;

(*
Sine
~~~~

.. code-block:: pascal

    function Sine(degrees: Integer): Extended;

Return the sin of *degrees*.

.. note::

    by Mutant Squirrle

Example:

.. code-block:: pascal

    if (sine(0) = 0) then
      WriteLn('Yay! We made maths!');

*)
function TReflectionMath.Sine(Degrees: Integer): Extended;
begin
  Result := sinearray[Trunc(FixD(Degrees))];
end;

(*
Cose
~~~~

.. code-block:: pascal

    function Cose(degrees: Integer): Extended;

Return the cos of *degrees*.

.. note::

    by Mutant Squirrle

Example:

.. code-block:: pascal

    if (Cose(0) = 1) then
      WriteLn('Yay! We made more maths!');

*)
function TReflectionMath.Cose(Degrees: Integer): Extended;
begin
  Result := cosearray[Trunc(FixD(Degrees))];
end;

(*
GridBox
~~~~~~~

.. code-block:: pascal

    function GridBox(slot, columns, rows, w, h, diffX, diffY: integer; starTPoint: TPoint): TBox;

Returns a TBox of the slot 'slot' in a grid created by the other parameters.
Slots start with 1 being the top left of the grid, and counting accross.
    * columns: number of columns in the grid
    * rows: number of rows in the grid
    * w: the width of each box in the grid
    * h: the height of each box in the grid
    * diffX: pixels from center to center (x)
    * diffY: pixels from center to center (y)
    * starTPoint: the center point of the top left box in the grid

.. note::

    | Author: Coh3n
    | Last Modified: Jan. 25th, 2012 by Coh3n

Example:

.. code-block:: pascal

    result := GridBox(Slot, 4, 2, 95, 80, 0, 150, point(110, 100));
*)
function TReflectionMath.GridBox(slot, columns, rows, w, h, diffX, diffY: integer; startPoint: TPoint): TBox;
begin
  if (slot > (columns * rows)) then
  begin
    writeln('GridBox: Invalid slot: '+toStr(slot));
    exit;
  end;

  result.x1 := (startPoint.x + (((slot - 1) mod columns) * diffX) - (w div 2));
  result.y1 := (startPoint.y + (((slot - 1) div columns) * diffY) - (h div 2));
  result.x2 := (result.x1 + w);
  result.y2 := (result.y1 + h);
end;

(*
Grid
~~~~

.. code-block:: pascal

    function Grid(columns, rows, w, h, diffX, diffY: integer; starTPoint: TPoint): TBoxArray;

Returns a grid of TBoxes (see GridBox for parameters).

.. note::

    | Author: Coh3n
    | Last Modified: Jan. 25th, 2012 by Coh3n

Example:

.. code-block:: pascal

    SMART_DrawBoxes(false, Grid(5, 10, 20, 20, 25, 25, point(30, 30)), clYellow);
*)
function TReflectionMath.Grid(columns, rows, w, h, diffX, diffY: integer; starTPoint: TPoint): TBoxArray;
var
  i: integer;
begin
  setLength(result, (columns * rows));

  for i := 0 to high(result) do
    result[i] := Reflect.Math.GridBox(i + 1, columns, rows, w, h, diffX, diffY, starTPoint);
end;

begin
  Reflect.Math.LoadCoSineArrays;
  Reflect.Math.SetupGauss;
end;
