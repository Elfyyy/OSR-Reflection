function CChr(IntValue: UInt8): AnsiChar;
begin
  case IntValue of
    187: Result:='=';
    188: Result:=',';
    189: Result:='-';
    190: Result:='.';
    191: Result:='/';
    219: Result:='[';
    220: Result:='\';
    221: Result:=']';
    222: Result:=''''[1];
    else Result:=Chr(IntValue);
  end;
end;

procedure TReflectionKeyboard.SendArrowWait(Key, WaitTime: Integer);
var
  KeyName: string;
begin
  case Key of
    0:    KeyName := 'up';
    1:    KeyName := 'right';
    2:    KeyName := 'down';
    3:    KeyName := 'left';
    else  Reflect.Logger.Warn('Key is not in range');
  end;
  if KeyName <> '' then
  begin
    Self.Press(KeyName, 'down');
    Wait(WaitTime);
    Self.Press(KeyName, 'up');
  end;
end;

procedure TReflectionKeyboard.TypeKey(Key: Variant);
begin
  Self.Press(Key);
end;

procedure TReflectionKeyboard.TypeSend(Text: string; Send: Boolean = True);
begin
  if Send then
    Text := Text + '{enter}';
  Self.Send(Text);
end;

(*
  TKEYBOARD DOCUMENTATION:
    https://villavu.com/forum/showthread.php?t=115523
*)

function TReflectionKeyboard.Code(Key: string): Integer;
begin
  if Length(Key) > 1 then
    case Lowercase(Key) of
      'backspace':        Exit(8);
      'ctrl','control':   Exit(17);
      'del','delete':     Exit(46);
      'down':             Exit(40);
      'end':              Exit(35);
      'enter','return':   Exit(10);
      'esc','escape':     Exit(27);
      'f1':               Exit(112);
      'f2':               Exit(113);
      'f3':               Exit(114);
      'f4':               Exit(115);
      'f5':               Exit(116);
      'f6':               Exit(117);
      'f7':               Exit(118);
      'f8':               Exit(119);
      'f9':               Exit(120);
      'f10':              Exit(121);
      'f11':              Exit(122);
      'f12':              Exit(123);
      'f13':              Exit(124);
      'f14':              Exit(125);
      'f15':              Exit(126);
      'home':             Exit(36);
      'insert':           Exit(45);
      'left':             Exit(37);
      'right':            Exit(39);
      'shift':            Exit(16);
      'space','spacebar': Exit(32);
      'tab':              Exit(9);
      'up':               Exit(38);
      else                Exit(0);
    end
  else
  begin
    SetKeyMouseTarget(0);
    Result := GetKeyCode(Key[1]);
    if Reflect.Smart.PID then
      SetEIOSTarget('libsmartremote', ToStr(Reflect.Smart.PID));
    Exit(Result);
  end;
end;

function TReflectionKeyboard.Format(Text: string): string;
var
  Button, Escaped: Boolean;
  ButtonString: string;
  Code: Variant;
  Index: Integer = 1;
  Key: Integer;
begin
  for Index to Length(Text) do
  begin
    case Text[Index] of
      '\':
        if Escaped then
        begin
          Escaped := False;
          if Button then
            ButtonString := ButtonString + '\'
          else
            Result := Result + '{220}';
        end
        else
          Escaped := True;
      '{':
        if Escaped then
        begin
          Escaped := False;
          if not Button then
            Result:= Result + '{16 down}{219}{16 up}';
        end
        {else if Button then
          RaiseException(20, 'Invalid String: ' + Text) }
        else
        begin
          Button := True;
          ButtonString := '';
        end;
      '}':
        if Escaped then
        begin
          Escaped := False;
          if Button then
            ButtonString := ButtonString + '}'
          else
            Result := Result + '{16 down}{221}{16 up}';
        end
        else if Button then
        begin
          Button:=false;
          if ExecRegexpr('(?i)^([a-z]+|f\d[0-5]?|[^a-z])( (\d+|down|up))?$', ButtonString) then
          begin
            Result:=Result+'{'+
              replace(
                ButtonString,
                Code:=ReplaceRegExpr('(?i)^([a-z]+|\d[0-5]?|[^a-z])( \d+| down| up)?$', ButtonString, '$1', True),
                toStr(Self.Code(Code)),
                [rfReplaceAll]
              )+'}';
          end;
        end
        {else
          RaiseException(20, 'Invalid String: ' + Text)};
      else
        begin
          Escaped:=false;
          if Button then
            ButtonString:=ButtonString+Text[Index]
          else
          begin
            Key:=Self.Code(Text[Index]);
            case Byte(Text[Index]) of
              65..90:
                Result := Result + '{16 down}{' + toStr(Self.Code(Text[Index])) + '}{16 up}';
              else
              begin
                if LowerCase(CChr(Key))=Text[Index] then
                  Result := Result + '{' + toStr(Self.Code(Text[Index])) + '}'
                else
                  Result := Result + '{16 down}{' + toStr(Self.Code(Text[Index])) + '}{16 up}';
              end;
            end;
          end;
        end;
    end;
  end;
  {if Button then
    RaiseException(20, 'Invalid String: '+ Text); }
  Exit(Result);
end;

function TReflectionKeyboard.Formatted(Text: string): Boolean;
begin Exit(ExecRegExpr('(?i)^(\{\d+( \d+| down| up)?\})+$', Text));end;

procedure TReflectionKeyboard.Press(Key: Variant; Option: Variant = '');
var
  Index, OptionNum, Speed: Integer;
  KeyPress: procedure(Word: word);
begin
  case VarType(Key) of
    VarByte, VarInteger:
      if Key <> 0 then
        case varType(Option) of
          VarInteger:
            for Index := 1 to Integer(Option) do
              Self.Press(Key);
          VarString:
            if (OptionNum := StrToIntDef(Option, -1)) = -1 then
            begin
              case Lowercase(Option) of
                '':
                begin
                  Self.Press(Key, 'down');
                  Self.Press(Key, 'up');
                end;
                'down': KeyPress := @KeyDown;
                'up':   KeyPress := @KeyUp;
              end;
              if @KeyPress <> nil then
              begin
                KeyPress(Key);
                Wait(10 + Random(50));
              end;
            end
            else
              Self.Press(Key, OptionNum);
        end;
    VarString:
      Self.Press(Self.Code(Key), Option);
  end;
end;

procedure TReflectionKeyboard.Send(Text: string);
var
  Button, TextArray: tStringArray;
  ButtonIndex, Presses: Integer;
begin
  Text := Self.format(Text);
  TextArray := MultiBetween(Text,'{','}');
  for ButtonIndex to High(TextArray) do
  begin
    Button := Explode(' ', TextArray[ButtonIndex]);
    if Length(Button) = 1 then
      Self.Press(StrToInt(Button[0]))
    else
      Self.Press(StrToInt(Button[0]), Button[1])
  end;
end;

function TReflectionKeyboard.State(Key: Variant): Boolean;
begin
  case VarType(Key) of
    VarByte, VarInteger:
      if Key <> 0 then
        Exit(IsKeyDown(Key));
    VarString:
      Exit(Self.State(Self.Code(Key)));
  end;
end;
