type
  TReflectNPC = record(TReflectActor)
{$IFNDEF CODEINSIGHT}
  DefReference, Id: Integer;
  Name: string;
  Tile: TTile;
{$ENDIF}
end;

  TReflectNPCArray = array of TReflectNPC;

procedure TReflectNPCArray.Init(_Id: Integer);
begin
  if Length(Self) = 0 then
    SetLength(Self, 1);
  Self[0].Id := _Id;
end;

procedure TReflectNPCArray.Init(_Name: string); overload;
begin
  if Length(Self) = 0 then
    SetLength(Self, 1);
  Self[0].Name := _Name;
end;

procedure TReflectNPCArray.Init; overload;
begin
  if Length(Self) = 0 then
    SetLength(Self, 1);
end;

procedure TReflectNPC.Init(_Id: Integer);
begin
  Self.Id := _Id;
end;

procedure TReflectNPC.Init(_Name: string); overload;
begin
  Self.Name := _Name;
end;

procedure TReflectNPC.Init; overload;
begin
end;

function TReflectNPC.GetIndices: tIntegerArray;
var
  I: Integer;
begin
  SetLength(Result, 100);
  for I := 0 to 99 do
  begin
    Result[I] := TReflectionSmart.GetFieldArrayInt(0, Client_NpcIndices, I);
    if (Result[I] = 0) then
      Break;
  end;
  SetLength(Result, I);
end;

{*Credit Widget, Modified by Lordsaturn*}
procedure TReflectNPCArray.Sort;
var
  I, C, L: integer;
  Tpa: TPointArray;
  Temp: TReflectNPCArray;
begin
  L := GetArrayLength(Self);
  if L < 1 then
    Exit;
  SetArrayLength(Tpa, L);
  SetArrayLength(Temp, L);
  for I := 0 to L - 1 do
    Tpa[I] := Self[I].Tile;
  SortTPAFrom(Tpa, Reflect.Internals.GetGlobalTile);
  for I := 0 to L - 1 do
    for C := 0 to L - 1 do
      if (Tpa[I].Y = Self[C].Tile.Y) and (Tpa[I].X = Self[C].Tile.X) then
        Temp[I] := Self[C];
  Self := Temp;
end;

function TReflectNPC.GetId: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.DefReference, NpcDefinition_ID);
end;

function TReflectNPC.GetName: string;
var
  Id: Integer;
  Line: string;
begin
  Id := Self.GetId;
  if (Id > 6755) or (Id < 0) then
    Exit;
  Line := NpcCache.GetStrings(Id);
  Result := Between('''name'': ''', ''',', Line);
end;

function TReflectNPC.GetActions: TStringArray;
var
  Id: Integer;
  Line, Temp: string;
begin
  Id := Self.GetId;
  if (Id > 6755) or (Id < 0) then
    Exit;
  Line := NpcCache.GetStrings(Id);
  Temp := Between('''actions'': [', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectNPC.GetCombatLevel: Integer;
var
  Id: Integer;
  Line, Temp: string;
begin
  Id := Self.GetId;
  if (Id > 6755) or (Id < 0) then
    Exit;
  Line := NpcCache.GetStrings(Id);
  Result := StrToInt(Between('combatLevel'': ', ',', Line));
end;

function TReflectNPC.GetMSPoint: TPoint;
begin
  Result := Reflect.Tiles.TileToMs(Self.GetTile);
end;

procedure TReflectNPCArray.GetAll;
var
  Indices: TIntegerArray;
  H, I, C: Integer;
  Temp: TReflectNpcArray;
begin
  Indices := TReflectNPC.GetIndices;
  H := High(Indices);
  SetLength(Self, H + 1);
  if (not Reflect.Mem.IsNull(ckNpcDef)) or (not Reflect.Mem.IsNull(ckNpcNode)) then
  begin
    Reflect.Mem.FreeObjects(ckNpcDef, True);
    Reflect.Mem.FreeObjects(ckNpcNode, True);
  end;
  for I := 0 to H do
  begin
    Reflect.Mem.GetObjectArray(
      ckNull, ckNpcNode, Client_LocalNpcs, I, I, Indices[I]);
    if (HookCache[ckNpcNode][I] = 0) then
      Continue;
    Reflect.Mem.GetObject(ckNpcNode, ckNpcDef, Npc_Definition, I, I);
    with Self[C] do
    begin
      Reference := HookCache[ckNpcNode][I];
      DefReference := HookCache[ckNpcDef][I];
      Tile := GetTile;
      Inc(C);
    end;
  end;
  SetLength(Self, C);
  Self.Sort;
end;

procedure TReflectNPCArray.Get;
var
  Temp, Temp1: TReflectNPCArray;
  I, H, T: Integer;
begin
  if Length(Self) = 0 then
  begin
    Reflect.Logger.Warn('TReflectNPCArray is not initialized @.Get');
    Exit;
  end;
  Temp.GetAll;
  if (Self[0].Id = 0) and (Self[0].Name = '') then
  begin
    Self := Temp;
    Exit;
  end;
  if Self[0].Id = 0 then
  begin
    H := High(Temp);
    SetLength(Temp1, H + 1);
    for I := 0 to H do
    begin
      if (Temp[I].GetName = Self[0].Name) then
      begin
        Temp1[T] := Temp[I];
        Inc(T);
      end;
    end;
  end
  else
  begin
    H := High(Temp);
    Setlength(Temp1, H + 1);
    for I := 0 to H do
    begin
      if (Temp[I].GetId = Self[0].Id) then
      begin
        Temp1[T] := Temp[I];
        Inc(T);
      end;
    end;
  end;
  Setlength(Temp1, T);
  if (Length(Temp1) = 0) then
    Exit;
  Self := Temp1;
end;

function TReflectNPC.Find(Npc: Variant; Distance: Integer = 144): Boolean;
var
  Temp: TReflectNPCArray;
begin
  if (Self.Id = 0) and (Self.Name = '') then
  begin
    Reflect.Logger.Warn('TReflectNPC is not initialized @.Find');
    Exit;
  end;
  Temp.Get;
  if Length(Temp) = 0 then
    Exit;
  if Reflect.Tiles.NearTile(Temp[0].GetTile, Distance) then
  begin
    Result := True;
    Self := Temp[0];
  end;
end;

procedure TReflectNPC.GetIndex(TheIndex: Integer);
begin
  if TheIndex < 1 then
    Exit;
  if (HookCache[ckNpcNode][0] <> 0) then
  begin
    Reflect.Mem.FreeObjects(ckNpcDef, False);
    Reflect.Mem.FreeObjects(ckNpcNode, False);
  end;
  Reflect.Mem.GetObjectArray(
    ckNull, ckNpcNode, Client_LocalNpcs, 0, 0, TheIndex);
  if (HookCache[ckNpcNode][0] = 0) then
    Exit;
  Reflect.Mem.GetObject(ckNpcNode, ckNpcDef, Npc_Definition, 0, 0);
  Self.Reference := HookCache[ckNpcNode][0];
  Self.DefReference := HookCache[ckNpcDef][0];
end;
