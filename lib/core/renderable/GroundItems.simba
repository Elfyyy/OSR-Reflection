
procedure TReflectGroundItemArray.Sort;
var
  I, C, L: integer;
  Tpa: TPointArray;
  Temp: TReflectGroundItemArray;
begin
  L := GetArrayLength(Self);
  if L < 1 then
    Exit;
  SetArrayLength(Tpa, L);
  SetArrayLength(Temp, L);
  for I := 0 to L - 1 do
    Tpa[I] := Self[I]._Tile;
  sortTPAFrom(Tpa, Reflect.Tiles.GetGlobalTile);
  for I := 0 to L - 1 do
    for C := 0 to L - 1 do
      if (Tpa[I].Y = Self[C]._Tile.Y) and (Tpa[I].X = Self[C]._Tile.X) then
        Temp[I] := Self[C];
  Self := Temp;
end;

function TReflectGroundItem.GetId: Integer;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectGroundItem.GetId');
    Exit(-1);
  end;

  Result := Reflect.Smart.GetFieldInt(Self.Reference, Item_Id);
end;

function TReflectGroundItem.GetQuantity: Integer;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectGroundItem.GetQuantity');
    Exit(-1);
  end;

  Result := Reflect.Smart.GetFieldInt(Self.Reference, Item_StackSizes);
end;

function TReflectGroundItem.GetName: string;
var
  Line: string;
  _Id: Integer;
begin
  _Id := Self.GetId;
  if not InRange(_Id, 0, Definition_Items_Length) then
    Exit;
  Line := ItemCache.GetStrings(_Id);
  Result := Between('''name'': ''', ''',', Line);
end;

function TReflectGroundItem.GetInvActions: TStringArray;
var
  Line, Temp: string;
  _Id: Integer;
begin
  _Id := Self.GetId;
  if not InRange(_Id, 0, Definition_Items_Length) then
    Exit;
  Line := ItemCache.GetStrings(_Id);
  Temp := Between('''actions'': [''', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectGroundItem.GetGroundActions: TStringArray;
var
  Line, Temp: string;
  _Id: Integer;
begin
  _Id := Self.GetId;
  if not InRange(_Id, 0, Definition_Items_Length) then
    Exit;
  Line := ItemCache.GetStrings(_Id);
  Temp := Between('''groundActions'': [''', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectGroundItem.GetHighAlchValue: Integer;
var
  Line: string;
  _Id: Integer;
begin
  _Id := Self.GetId;
  if not InRange(_Id, 0, Definition_Items_Length) then
    Exit;
  Line := ItemCache.GetStrings(_Id);
  Result := StrToInt(Between('highAlchValue'': ', '}', Line));
end;

function TReflectGroundItem.GetTile: TTile;
begin
  Result := Self._Tile;
end;

function TReflectGroundItem.GetMSPoint: TPoint;
begin
  Result := Reflect.Tiles.TileToMs(Self.GetTile);
end;

{$IFNDEF CODEINSIGHT}
procedure TReflectGroundItemArray._GetAt(_Tile: TPoint; BaseX, BaseY,
  Plane: Integer);
var
  _Id, Quantity, Iteration, Start, I: Integer;
  Temp: TReflectGroundItemArray;
begin
  Reflect.Mem.Get3DObject(ckNull, ckGroundArray, Client_GroundItems, 0, 0,
    Plane, _Tile.X, _Tile.Y);
  if HookCache[ckGroundArray][0] < 1 then
    Exit;
  for I := 0 to 999 do
    if HookCache[ckGroundList][I] = 0 then
    begin
      Start := I;
      Break;
    end;
  Reflect.Mem.GetObject(ckGroundArray, ckGroundList, LinkedList_Head, Start, 0);
  Reflect.Mem.GetObject(ckGroundList, ckGroundList, Node_next, Start + 1, Start);
  SetLength(Temp, 128);
  while (HookCache[ckGroundList][Start + Iteration] > 0) and
    (HookCache[ckGroundList][Start + Iteration] <>
    HookCache[ckGroundList][Start + Iteration + 1]) do
  begin
    _Id := Reflect.Smart.GetFieldInt(
      HookCache[ckGroundList][Start + Iteration + 1], Item_Id);
    if (_Id < 0) or (_Id > Definition_Items_Length) then
      Break;
    Temp[Iteration]._Id := _Id;
    Temp[Iteration]._Tile.X := _Tile.X + BaseX;
    Temp[Iteration]._Tile.Y := _Tile.Y + BaseY;
    Temp[Iteration].Reference :=
      HookCache[ckGroundList][Start + Iteration + 1];
    Reflect.Mem.GetObject(
      ckGroundList, ckGroundList, Node_Next, Start + Iteration + 2, Start + Iteration + 1);
    Inc(Iteration);
  end;
  SetLength(Temp, Iteration);
  Self := Temp;
end;
{$ENDIF}

procedure TReflectGroundItemArray.GetAll(Distance: Integer = 103);
var
   X, Y, BaseX, BaseY, Plane, L, I, H, HighX, HighY, XDistance, YDistance: Integer;
   TempArray, TempArray2: TReflectGroundItemArray;
   Position: TTile;
begin
  Reflect.Mem.FreeObjects(ckGroundList, False);
  Position := Reflect.Tiles.GetGlobalTile;
  Distance := Round(Distance / 2);
  BaseX := Reflect.Misc.BaseX;
  BaseY := Reflect.Misc.BaseY;
  Position := Point(Position.X - BaseX, Position.Y - BaseY);
  Plane := Reflect.Tiles.GetPlane;
  HighX := Position.X + Distance;
  HighY := Position.Y + Distance;
  if HighX > 103 then
    HighX := 103;
  if HighY > 103 then
    HighY := 103;
  XDistance := Position.X - Distance;
  YDistance := Position.Y - Distance;
  if XDistance < 0 then
    XDistance := 0;
  if YDistance < 0 then
    YDistance := 0;
  SetLength(Self, Definition_Items_Length);
  for X := XDistance to HighX do
    for Y := YDistance to HighY do
    begin
      SetLength(TempArray, 0);
      TempArray._GetAt(
        Point(X, Y), BaseX, BaseY, Plane);
      Reflect.Mem.FreeObjects(ckGroundArray, False);
      L := Length(TempArray);
      if (L > 0) then
      begin
        SetLength(TempArray2, Length(TempArray2) + L);
        H := Length(TempArray2);
        for I := 0 to High(TempArray) do
          TempArray2[H - L + I] := TempArray[I];
      end;
    end;
  TempArray2.Sort;
  Self := TempArray2;
end;

procedure TReflectGroundItemArray.GetAt(RealTile: TTile);
var
  BaseX, BaseY, Plane: Integer;
  Temp : TReflectGroundItemArray;
begin
  Reflect.Mem.FreeObjects(ckGroundList, False);
  BaseX := Reflect.Misc.BaseX;
  BaseY := Reflect.Misc.BaseY;
  Plane := Reflect.Tiles.GetPlane;
  Temp._GetAt(
    Point(RealTile.X - BaseX, RealTile.Y - BaseY), BaseX, BaseY, Plane);
  Reflect.Mem.FreeObjects(ckGroundArray, False);
  Self := Temp;
end;

procedure TReflectGroundItemArray.Get(V: TVariantArray; Distance: Integer = 103);
var
  I : Integer;
  IDs : TIntegerArray;
  Names : TStringArray;
  Temp : TReflectGroundItemArray;
begin
  for I := 0 to High(V) do
    if Reflect.Misc.VariantIsString(V[I]) then
    begin
      SetLength(Names, Length(Names)+1);
      Names[High(Names)] := V[I];
    end
    else
    begin
      if Reflect.Misc.VariantIsInteger(V[I]) then
      begin
        SetLength(IDs, Length(IDs)+1);
        IDs[High(IDs)] := V[I];
      end;
    end;

  Self := [];
  Temp.GetAll(Distance);

  for I := 0 to High(Temp) do
    if InIntArray(IDs, Temp[I].GetID) or Reflect.Internals.InStringArray(Names, Temp[I].GetName) then
    begin
      SetLength(Self, Length(Self)+1);
      Self[High(Self)] := Temp[I];
    end;

  Self.Sort;
end;

procedure TReflectGroundItemArray.Get(Names: TStringArray; Distance: Integer = 103); Overload;
var
  Temp : TVariantArray;
  I : Integer;
begin
  SetLength(Temp, Length(Names));
  for I := 0 to High(Names) do
    Temp[I] := Names[I];

  Self.Get(Temp, Distance);
end;

procedure TReflectGroundItemArray.Get(IDs: TIntegerArray; Distance: Integer = 103); Overload;
var
  Temp : TVariantArray;
  I : Integer;
begin
  SetLength(Temp, Length(IDs));
  for I := 0 to High(IDs) do
    Temp[I] := IDs[I];

  Self.Get(Temp, Distance);
end;

procedure TReflectGroundItemArray.Get(Name: String; Distance: Integer = 103); Overload;
var
  Temp : TVariantArray;
begin
  Temp := [Name];
  Self.Get(Temp, Distance);
end;

procedure TReflectGroundItemArray.Get(ID: Integer; Distance: Integer = 103); Overload;
var
  Temp : TVariantArray;
begin
  Temp := [ID];
  Self.Get(Temp, Distance);
end;

function TReflectGroundItem.Find(V: TVariantArray; Distance: Integer = 103): Boolean;
var
  Temp: TReflectGroundItemArray;
begin
  Temp.Get(V, Distance);
  if Length(Temp) = 0 then
    Exit;
  Result := True;
  Self := Temp[0];
end;

function TReflectGroundItem.Find(Names: TStringArray; Distance: Integer = 103): Boolean; Overload;
var
  Temp : TVariantArray;
  I : Integer;
begin
  SetLength(Temp, Length(Names));
  for I := 0 to High(Names) do
    Temp[I] := Names[I];

  Result := Self.Find(Temp, Distance);
end;

function TReflectGroundItem.Find(IDs: TIntegerArray; Distance: Integer = 103): Boolean; Overload;
var
  Temp : TVariantArray;
  I : Integer;
begin
  SetLength(Temp, Length(IDs));
  for I := 0 to High(IDs) do
    Temp[I] := IDs[I];

  Result := Self.Find(Temp, Distance);
end;

function TReflectGroundItem.Find(Name: String; Distance: Integer = 103): Boolean; Overload;
var
  Temp : TVariantArray;
begin
  Temp := [Name];
  Result := Self.Find(Temp, Distance);
end;

function TReflectGroundItem.Find(ID: Integer; Distance: Integer = 103): Boolean; Overload;
var
  Temp : TVariantArray;
begin
  Temp := [ID];
  Result := Self.Find(Temp, Distance);
end;

function TReflectGroundItem.IsOnMS: Boolean;
begin
  Result := PointInBox(Self.GetMSPoint, [MSX1, MSY1, MSX2, MSY2]);
end;

