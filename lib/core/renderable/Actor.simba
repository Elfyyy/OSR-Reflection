function TReflectActor.GetSpokenText: string;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.GetSpokenText');
    Exit('');
  end;

  Result := Reflect.Smart.GetFieldString(Self.Reference, Actor_SpokenText);
end;

function TReflectActor.GetTile: TTile;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.GetTile');
    Exit(Point(-1, -1));
  end;

  Result.X := Reflect.Misc.BaseX +
    Reflect.Smart.GetFieldInt(Self.Reference, Actor_WorldX) div 128;
  Result.Y:= Reflect.Misc.BaseY +
    Reflect.Smart.GetFieldInt(Self.Reference, Actor_WorldY) div 128;
end;

function TReflectActor.GetQueueSize: Integer;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.GetQueueSize');
    Exit(-1);
  end;

  Result := Reflect.Smart.GetFieldInt(Self.Reference, Actor_QueueSize);
end;

function TReflectActor.GetQueue(Index: Integer = 0): TTile;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.GetQueue');
    Exit(Point(-1, -1));
  end;

  Result := Point(Reflect.Smart.GetFieldArrayInt(
    Self.Reference, Actor_QueueX, Index) + Reflect.Misc.BaseX,
    Reflect.Smart.GetFieldArrayInt(Self.Reference, Actor_QueueY, 0) +
    Reflect.Misc.BaseY);
end;

function TReflectActor.GetAnimation: Integer;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.GetAnimation');
    Exit(-1);
  end;

  Result := Reflect.Smart.GetFieldInt(Self.Reference, Actor_Animation);
end;

function TReflectActor.GetHealthScale: Integer;
var
  CombatInfoList, HeadNode, NextNode, CombatInfoDef: TReflectPointer;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.GetHealth');
    Exit(-1);
  end;

  Result := -1;
  CombatInfoList.GetFieldObject(Self.Reference, Actor_CombatInfo);
  HeadNode.GetFieldObject(CombatInfoList.Reference, CombatInfoList_Head);
  NextNode.GetFieldObject(HeadNode.Reference, Node_Next);

  if not Reflect.Smart.IsNull(NextNode.Reference) then
  begin
    CombatInfoDef.GetFieldObject(NextNode.Reference, HealthBar_Definition);
    if not Reflect.Smart.IsNull(CombatInfoDef.Reference) then
    begin
      result := CombatInfoDef.GetFieldInt(CombatInfo2_HealthScale);
    end;

    CombatInfoDef.Free;
  end;

  NextNode.Free;
  HeadNode.Free;
  CombatInfoList.Free;
end;

function TReflectActor.GetHealth: Integer;
var
  CombatInfoList, HeadNode, NextNode, List2, HeadNode2, NextNode2: TReflectPointer;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.GetMaxHealth');
    Exit(-1);
  end;

  Result := -1;
  CombatInfoList.GetFieldObject(Self.Reference, Actor_CombatInfo);
  HeadNode.GetFieldObject(CombatInfoList.Reference, CombatInfoList_Head);
  NextNode.GetFieldObject(HeadNode.Reference, Node_Next);

  if not Reflect.Smart.IsNull(NextNode.Reference) then
  begin
    List2.GetFieldObject(NextNode.Reference, HealthBar_CombatInfoList);
    HeadNode2.GetFieldObject(List2.Reference, CombatInfoList_Head);
    NextNode2.GetFieldObject(HeadNode2.Reference, Node_Next);

    if not Reflect.Smart.IsNull(NextNode2.Reference) then
    begin
      result := NextNode2.GetFieldInt(CombatInfo1_Health);
    end;

    NextNode2.Free;
    HeadNode2.Free;
    List2.Free;
  end;

  NextNode.Free;
  HeadNode.Free;
  CombatInfoList.Free;
end;

function TReflectActor.GetHealthRatio: Integer;
var
  CombatInfoList, HeadNode, NextNode, List2, HeadNode2, NextNode2: TReflectPointer;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.GetMaxHealth');
    Exit(-1);
  end;

  Result := -1;
  CombatInfoList.GetFieldObject(Self.Reference, Actor_CombatInfo);
  HeadNode.GetFieldObject(CombatInfoList.Reference, CombatInfoList_Head);
  NextNode.GetFieldObject(HeadNode.Reference, Node_Next);

  if not Reflect.Smart.IsNull(NextNode.Reference) then
  begin
    List2.GetFieldObject(NextNode.Reference, HealthBar_CombatInfoList);
    HeadNode2.GetFieldObject(List2.Reference, CombatInfoList_Head);
    NextNode2.GetFieldObject(HeadNode2.Reference, Node_Next);

    if not Reflect.Smart.IsNull(NextNode2.Reference) then
    begin
      result := NextNode2.GetFieldInt(CombatInfo1_HealthRatio);
    end;

    NextNode2.Free;
    HeadNode2.Free;
    List2.Free;
  end;

  NextNode.Free;
  HeadNode.Free;
  CombatInfoList.Free;
end;

function TReflectActor.GetHealthPercentage: Extended;
begin
  result := (self.GetHealth / self.getHealthScale) * 100;
end;

function TReflectActor.GetInteractingIndex: Integer;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.GetInteractingIndex');
    Exit(-1);
  end;

  Result := Reflect.Smart.GetFieldInt(Self.Reference, Actor_InteractingIndex);
end;

function TReflectActor.GetCombatCycle: Integer;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.GetCombatCycle');
    Exit(-1);
  end;

  Result := Reflect.Smart.GetFieldInt(Self.Reference, Actor_CombatCycle);
end;

function TReflectActor.IsMoving: Boolean;
begin
  Result := (Self.GetQueueSize > 0);
end;

function TReflectActor.IsUnderAttack: Boolean;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectActor.IsUnderAttack');
    Exit(False);
  end;

  Result := (Self.GetCombatCycle > Reflect.Misc.GetClientLoopCycle);
end;
