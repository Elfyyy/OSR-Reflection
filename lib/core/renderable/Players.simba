
function TReflectPlayer.GetNameInfo: TReflectNameInfo;
begin
  Result.GetFieldObject(Self.Reference, Player_Name);
end;

function TReflectPlayer.GetName: string;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectPlayer.GetName');
    Exit('');
  end;

  //Result := Self.GetNameInfo.GetName;
end;

function TReflectPlayer.GetDecodedName: string;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectPlayer.GetDecodedName');
    Exit('');
  end;

 // Result := Self.GetNameInfo.GetDecodedName;
end;

function TReflectPlayer.GetIndex: Integer;
begin
  Result := Self._Index + 32768;
end;

function TReflectPlayer.GetPlayerIndex: Integer;
begin
  Result := Self.GetIndex;
end;

function TReflectPlayer.GetMSPoint: TPoint;
begin
  Result := Reflect.Tiles.TileToMs(Self.GetTile);
end;

procedure TReflectPlayerArray.GetAll;
var
  I, Iteration: Integer;
  Player: TReflectPointer;
begin
  if not Reflect.Mem.IsNull(ckPlayers) then
    Reflect.Mem.FreeObjects(ckPlayers, True);
  for I := 0 to 2047 do
  begin
    Player.GetFieldArrayObject(0, Client_LocalPlayers, I);
    if Player.Reference > 0 then
    begin
      SetLength(Self, Iteration + 1);
      with Self[Iteration] do
      begin
        _Index := I;
        HookCache[ckPlayers][Iteration] := Player.Reference;
        Reference := HookCache[ckPlayers][Iteration];
        Inc(Iteration);
      end;
    end;
  end;
end;

procedure TReflectPlayerArray.Get(Names: TStringArray);
var
  Temp : TReflectPlayerArray;
  I : integer;
begin
  Self := [];
  Temp.GetAll;

  for I := 0 to High(Temp) do
    if Reflect.Internals.InStringArray(Names, Temp[I].GetName) then
    begin
      SetLength(Self, Length(Self)+1);
      Self[High(Self)] := Temp[I];
    end;
end;

procedure TReflectPlayerArray.Get(Name: String); Overload;
begin
  Self.Get([Name]);
end;

function TReflectPlayer.Find(Names: TStringArray): Boolean;
var
  Temp: TReflectPlayerArray;
begin
  Temp.Get(Names);
  if Length(Temp) = 0 then
    Exit;
  Result := True;
  Self := Temp[0];
end;

function TReflectPlayer.Find(Name: String): Boolean; Overload;
begin
  Result := Self.Find([Name]);
end;

function TReflectPlayer.IsOnMS: Boolean;
begin
  Result := PointInBox(Self.GetMSPoint, AREA_MS);
end;

function TReflectPlayer.GetCombatLevel: integer;
begin
  if Reflect.Smart.IsNull(Self.Reference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectPlayer.GetCombatLevel');
    Exit(-1);
  end;

  Result := Reflect.Smart.GetFieldInt(Self.Reference, Player_CombatLevel);
end;

