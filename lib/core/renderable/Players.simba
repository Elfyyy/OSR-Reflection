
procedure TReflectPlayerArray.GetAll;
var
  I, Iteration: Integer;
  Player: TReflectPointer;
begin
  if not Reflect.Mem.IsNull(ckPlayers) then
    Reflect.Mem.FreeObjects(ckPlayers, True);
  for I := 0 to 2047 do
  begin
    Player.GetFieldArrayObject(0, Client_LocalPlayers, I);
    if Player.Reference > 0 then
    begin
      SetLength(Self, Iteration + 1);
      with Self[Iteration] do
      begin
        _Index := I;
        HookCache[ckPlayers][Iteration] := Player.Reference;
        Reference := HookCache[ckPlayers][Iteration];
        Inc(Iteration);
      end;
    end;
  end;
end;

function TReflectPlayer.GetName: string;
begin
  Result := Reflect.Smart.GetFieldString(Self.Reference, Player_Name);
end;

function TReflectPlayer.GetIndex: Integer;
begin
  Result := Self._Index + 32768;
end;

function TReflectPlayer.GetMSPoint: TPoint;
begin
  Result := Reflect.Tiles.TileToMs(Self.GetTile);
end;

