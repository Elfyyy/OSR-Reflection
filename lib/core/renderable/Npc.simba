
function TReflectNPC.GetIndices: tIntegerArray;
var
  I: Integer;
begin
  SetLength(Result, 100);
  for I := 0 to 99 do
  begin
    Result[I] := Reflect.Smart.GetFieldArrayInt(0, Client_NpcIndices, I);
    if (Result[I] = 0) then
      Break;
  end;
  SetLength(Result, I);
end;

{*Credit Widget, Modified by Lordsaturn*}
procedure TReflectNPCArray.Sort;
var
  I, C, L: integer;
  Tpa: TPointArray;
  Temp: TReflectNPCArray;
begin
  L := GetArrayLength(Self);
  if L < 1 then
    Exit;
  SetArrayLength(Tpa, L);
  SetArrayLength(Temp, L);
  for I := 0 to L - 1 do
    Tpa[I] := Self[I]._Tile;
  SortTPAFrom(Tpa, Reflect.Tiles.GetGlobalTile);
  for I := 0 to L - 1 do
    for C := 0 to L - 1 do
      if (Tpa[I].Y = Self[C]._Tile.Y) and (Tpa[I].X = Self[C]._Tile.X) then
        Temp[I] := Self[C];
  Self := Temp;
end;

function TReflectNPC.GetId: Integer;
begin
  if Reflect.Smart.IsNull(Self._DefReference) then
  begin
    Reflect.Logger.Error('Avoided using null''d pointer at: TReflectNPC.GetId');
    Exit(-1);
  end;

  Result := Reflect.Smart.GetFieldInt(Self._DefReference, NpcDefinition_ID);
end;

function TReflectNPC.GetIndex: Integer;
begin
  Result := Self._Index;
end;

function TReflectNPC.GetName: string;
var
  Id: Integer;
  Line: string;
begin
  Id := Self.GetId;
  if not InRange(Id, 0, Definition_NPCs_Length) then
    Exit;
  Line := NpcCache.GetStrings(Id);
  Result := Between('''name'': ''', ''',', Line);
end;

function TReflectNPC.GetActions: TStringArray;
var
  Id: Integer;
  Line, Temp: string;
begin
  Id := Self.GetId;
  if not InRange(Id, 0, Definition_NPCs_Length) then
    Exit;
  Line := NpcCache.GetStrings(Id);
  Temp := Between('''actions'': [', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectNPC.GetCombatLevel: Integer;
var
  Id: Integer;
  Line, Temp: string;
begin
  Id := Self.GetId;
  if not InRange(Id, 0, Definition_NPCs_Length) then
    Exit;
  Line := NpcCache.GetStrings(Id);
  Result := StrToInt(Between('combatLevel'': ', ',', Line));
end;

function TReflectNPC.GetMSPoint: TPoint;
begin
  Result := Reflect.Tiles.TileToMs(Self.GetTile);
end;

procedure TReflectNPCArray.GetAll;
var
  Indices: TIntegerArray;
  H, I, C: Integer;
  Temp: TReflectNpcArray;
begin
  Indices := TReflectNPC.GetIndices;
  H := High(Indices);
  SetLength(Self, H + 1);
  if (not Reflect.Mem.IsNull(ckNpcDef)) or (not Reflect.Mem.IsNull(ckNpcNode)) then
  begin
    Reflect.Mem.FreeObjects(ckNpcDef, True);
    Reflect.Mem.FreeObjects(ckNpcNode, True);
  end;
  for I := 0 to H do
  begin
    Reflect.Mem.GetObjectArray(
      ckNull, ckNpcNode, Client_LocalNpcs, I, I, Indices[I]);
    if (HookCache[ckNpcNode][I] = 0) then
      Continue;
    Reflect.Mem.GetObject(ckNpcNode, ckNpcDef, Npc_Definition, I, I);
    with Self[C] do
    begin
      _Index := Indices[I];
      Reference := HookCache[ckNpcNode][I];
      _DefReference := HookCache[ckNpcDef][I];
      _Tile := GetTile;
      Inc(C);
    end;
  end;
  SetLength(Self, C);
  Self.Sort;
end;

procedure TReflectNPCArray.Get(V: TVariantArray);
var
  I : Integer;
  IDs : TIntegerArray;
  Names : TStringArray;
  Temp : TReflectNPCArray;
begin
  for I := 0 to High(V) do
    if Reflect.Misc.VariantIsString(V[I]) then
    begin
      SetLength(Names, Length(Names)+1);
      Names[High(Names)] := V[I];
    end
    else
    begin
      if Reflect.Misc.VariantIsInteger(V[I]) then
      begin
        SetLength(IDs, Length(IDs)+1);
        IDs[High(IDs)] := V[I];
      end;
    end;

  Self := [];
  Temp.GetAll;

  for I := 0 to High(Temp) do
    if InIntArray(IDs, Temp[I].GetID) or Reflect.Internals.InStringArray(Names, Temp[I].GetName) then
    begin
      SetLength(Self, Length(Self)+1);
      Self[High(Self)] := Temp[I];
    end;

  Self.Sort;
end;

procedure TReflectNPCArray.Get(Names: TStringArray); Overload;
var
  Temp : TVariantArray;
  I : Integer;
begin
  SetLength(Temp, Length(Names));
  for I := 0 to High(Names) do
    Temp[I] := Names[I];

  Self.Get(Temp);
end;

procedure TReflectNPCArray.Get(IDs: TIntegerArray); Overload;
var
  Temp : TVariantArray;
  I : Integer;
begin
  SetLength(Temp, Length(IDs));
  for I := 0 to High(IDs) do
    Temp[I] := IDs[I];

  Self.Get(Temp);
end;

procedure TReflectNPCArray.Get(Name: String); Overload;
var
  Temp : TVariantArray;
begin
  Temp := [Name];
  Self.Get(Temp);
end;

procedure TReflectNPCArray.Get(ID: Integer); Overload;
var
  Temp : TVariantArray;
begin
  Temp := [ID];
  Self.Get(Temp);
end;

function TReflectNPC.Find(V: TVariantArray): Boolean;
var
  Temp: TReflectNPCArray;
begin
  Temp.Get(V);
  if Length(Temp) = 0 then
    Exit;
  Result := True;
  Self := Temp[0];
end;

function TReflectNPC.Find(Names: TStringArray): Boolean; Overload;
var
  Temp : TVariantArray;
  I : Integer;
begin
  SetLength(Temp, Length(Names));
  for I := 0 to High(Names) do
    Temp[I] := Names[I];

  Result := Self.Find(Temp);
end;

function TReflectNPC.Find(IDs: TIntegerArray): Boolean; Overload;
var
  Temp : TVariantArray;
  I : Integer;
begin
  SetLength(Temp, Length(IDs));
  for I := 0 to High(IDs) do
    Temp[I] := IDs[I];

  Result := Self.Find(Temp);
end;

function TReflectNPC.Find(Name: String): Boolean; Overload;
var
  Temp : TVariantArray;
begin
  Temp := [Name];
  Result := Self.Find(Temp);
end;

function TReflectNPC.Find(ID: Integer): Boolean; Overload;
var
  Temp : TVariantArray;
begin
  Temp := [ID];
  Result := Self.Find(Temp);
end;

function TReflectNPC.FindByIndex(NpcIndex: Integer): Boolean;
begin
  if NpcIndex < 1 then
    Exit;
  Reflect.Mem.FreeObjects(ckNpcDef, False);
  Reflect.Mem.FreeObjects(ckNpcNode, False);
  Reflect.Mem.GetObjectArray(
    ckNull, ckNpcNode, Client_LocalNpcs, 0, 0, NpcIndex);
  if (HookCache[ckNpcNode][0] = 0) then
    Exit;
  Result := True;
  Reflect.Mem.GetObject(ckNpcNode, ckNpcDef, Npc_Definition, 0, 0);
  Self.Reference := HookCache[ckNpcNode][0];
  Self._DefReference := HookCache[ckNpcDef][0];
  Self._Index := NpcIndex;
end;

function TReflectNPC.IsOnMS: Boolean;
begin
  Result := PointInBox(Self.GetMSPoint, AREA_MS);
end;


