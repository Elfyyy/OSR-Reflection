
{* Text functions credit to Frement *}

{$IFNDEF CODEINSIGHT}
function TReflectionText.RemoveFormatting(Text: string): string;
var
  I: Integer;
  Skip: Boolean;
begin
  for I := 1 to Length(Text) do
  begin
    if Text[I] = '<' then
      Skip := True;
    if (Skip) and (Text[I] = '>') then
    begin
      Skip := False;
      Continue;
    end;
    if Skip then
      Continue;
    Result := Result + Text[I];
  end;
  Result := Replace(Result, '  ', ' ',[rfReplaceAll]);
end;

function TReflectionText.GetMenuIndex(
  Option: String; Options: TStringArray): Integer;
var
  I: Integer;
begin
  Result := -1;
  for I := 0 to High(Options) do
  begin
    if Pos(Option, Options[I]) > 0 then
    begin
      Result := I;
      Exit;
    end;
  end;
end;

function TReflectionText.IsMenuOpen: Boolean;
begin
  Result := Reflect.Smart.GetFieldInt(0, Client_IsMenuOpen);
end;

function TReflectionText.GetMenuOptions: TStringArray;
var
  Count, I, J: Integer;
  Act, Opt: string;
begin
  Count := Reflect.Smart.GetFieldInt(0, Client_MenuCount);
  SetLength(Result, Count);
  for I := Count - 1 downto 0 do
  begin
    Act := '';
    Opt := '';
    Act := Trim(Reflect.Smart.GetFieldArrayString(0, Client_MenuActions, I));
    Opt := Reflect.Text.RemoveFormatting(Trim(
      Reflect.Smart.GetFieldArrayString(0, Client_MenuOptions, I)));
    Result[J] := Trim(Act + ' ' + Opt);
    Inc(J);
  end;
end;

function TReflectionText.OptionExists(Option: string): Boolean;
begin
  Result := (Reflect.Text.GetMenuIndex(Option, Reflect.Text.GetMenuOptions) <> -1);
end;
{$ENDIF}

function TReflectionText.ChooseOption(Option: string): Boolean;
var
  Index, MenuX, MenuY, MenuWidth, XOff, YOff: Integer;
  Options: TStringArray;
  Left: Boolean;
begin
  Options := Reflect.Text.GetMenuOptions;
  if not Reflect.Text.IsMenuOpen then
    Exit;
  Index := Reflect.Text.GetMenuIndex(Option, Options);
  MenuX := Reflect.Smart.GetFieldInt(0, Client_MenuX) + 4;
  MenuY := Reflect.Smart.GetFieldInt(0, Client_MenuY) + 4;
  MenuWidth := Reflect.Smart.GetFieldInt(0, Client_MenuWidth);
  XOff := RandomRange(4, MenuWidth - 4);
  YOff := RandomRange(20, 25) + (Index * 15);
  if (MenuX + (MenuWidth div 2) > 765) then
    Left := True;
  if (MenuX - (MenuWidth div 2) < 0) then
    Left := False;
  if (Index = -1) then
  begin
    GetMousePos(MenuX, MenuY);
    if Left then
      Reflect.Mouse.Move(Point(
        MenuX - 30 - MenuWidth + Random(10), MenuY + RandomRange(-2, 2)), 2, 2)
    else
      Reflect.Mouse.Move(Point(
        MenuX + 30 + MenuWidth + Random(10), MenuY + RandomRange(-2, 2)), 2, 2);
    Exit;
  end;
  Reflect.Mouse.Move(Point(MenuX + XOff, MenuY + YOff), 2, 2);
  Wait(RandomRange(100, 250));
  Reflect.Mouse.Click(Mouse_Left);
  Result := True;
end;

function TReflectionText.ChooseOption(Option: string; Time: Integer): Boolean; overload;
var
  T: Integer;
begin
  Result := False;
  T := GetSystemTime + Time;
  while GetSystemTime < T do
  begin
    if Reflect.Text.IsMenuOpen then
    begin
      Result := Reflect.Text.ChooseOption(Option);;
      Exit;
    end;
    Wait(20 + Random(20));
  end;
end;

function TReflectionText.GetUpText: string;
var
  Options: TStringArray;
begin
  Options := Reflect.Text.GetMenuOptions;
  if (High(Options) - 1) > 0 then
    Result := Options[0] + ' / ' + ToStr(High(Options) - 1) + ' more options'
  else
    Result := Options[0];
  if Result = 'Cancel' then
    Result := '';
end;

function TReflectionText.IsUpTextMulti(UpText: TStringArray): Boolean;
var
  I: integer;
  UT: string;
  T: TReflectTimer;
begin
  Result := False;
  T.Start;
  while UT = '' do
  begin
    UT := Reflect.Text.GetUpText;
    if T.ElapsedTime > 1000 then
      Exit;
    Wait(50+Random(50));
  end;
  for I := 0 to High(UpText) do
  begin
    Result := Pos(Trim(UpText[I]), UT) > 0;
    if Result then Exit;
  end;
end;

function TReflectionText.IsUpText(UpText: string): Boolean;
begin
  Result := Reflect.Text.IsUpTextMulti([UpText]);
end;

function TReflectionText.IsUpTextMulti(S: TStringArray; Time: Integer): Boolean; overload;
var
  T: UInt64;
begin
  Result := False;
  T := GetSystemTime + Time;
  while (GetSystemTime < T) do
  begin
    if Reflect.Text.IsUpTextMulti(S) then
    begin
      Result := True;
      Exit;
    end;
    Wait(20 + Random(10));
  end;
end;

function TReflectionText.IsUpText(S: string; Time: Integer): Boolean; overload;
begin
  Result := Reflect.Text.IsUpTextMulti([S], Time);
end;
