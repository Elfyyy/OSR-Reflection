
type
  TReflectGroundItem = record(TReflectPointer)
{$IFNDEF CODEINSIGHT}
    Id: Integer;
    Name: string;
    Tile: TTile;
{$ENDIF}
end;

  TReflectGroundItemArray = array of TReflectGroundItem;

procedure TReflectGroundItemArray.Init(_Id: Integer);
begin
  if Length(Self) = 0 then
    SetLength(Self, 1);
  Self[0].Id := _Id;
end;

procedure TReflectGroundItemArray.Init(_Name: string);
  overload;
begin
  if Length(Self) = 0 then
    SetLength(Self, 1);
  Self[0].Name := _Name;
end;

procedure TReflectGroundItemArray.Init; overload;
begin
  if Length(Self) = 0 then
    SetLength(Self, 1);
  Self[0].Id := 0;
  Self[0].Name := '';
end;

procedure TReflectGroundItem.Init(_Id: Integer);
begin
  Self.Id := _Id;
end;

procedure TReflectGroundItem.Init(_Name: string); overload;
begin
  Self.Name := _Name;
end;

procedure TReflectGroundItem.Init; overload;
begin
  Self.Id := 0;
  Self.Name := '';
end;

procedure TReflectGroundItemArray.Sort;
var
  I, C, L: integer;
  Tpa: TPointArray;
  Temp: TReflectGroundItemArray;
begin
  L := GetArrayLength(Self);
  if L < 1 then
    Exit;
  SetArrayLength(Tpa, L);
  SetArrayLength(Temp, L);
  for I := 0 to L - 1 do
    Tpa[I] := Self[I].Tile;
  sortTPAFrom(Tpa, Reflect.Internals.GetGlobalTile);
  for I := 0 to L - 1 do
    for C := 0 to L - 1 do
      if (Tpa[I].Y = Self[C].Tile.Y) and (Tpa[I].X = Self[C].Tile.X) then
        Temp[I] := Self[C];
  Self := Temp;
end;

function TReflectGroundItem.GetId: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.Reference, Item_Id);
end;

function TReflectGroundItem.GetQuantity: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(Self.Reference, Item_StackSizes);
end;

function TReflectGroundItem.GetName: string;
var
  Line: string;
  Id: Integer;
begin
  Id := Self.GetId;
  Line := ItemCache.GetStrings(Id);
  Result := Between('''name'': ''', ''',', Line);
end;

function TReflectGroundItem.GetInvActions: TStringArray;
var
  Line, Temp: string;
  Id: Integer;
begin
  Id := Self.GetId;
  Line := ItemCache.GetStrings(Id);
  Temp := Between('''actions'': [''', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectGroundItem.GetGroundActions: TStringArray;
var
  Line, Temp: string;
  Id: Integer;
begin
  Id := Self.GetId;
  Line := ItemCache.GetStrings(Id);
  Temp := Between('''groundActions'': [''', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectGroundItem.GetHighAlchValue: Integer;
var
  Line: string;
  Id: Integer;
begin
  Id := Self.GetId;
  Line := ItemCache.GetStrings(Id);
  Result := StrToInt(Between('highAlchValue'': ', '}', Line));
end;

function TReflectGroundItem.GetTile: TTile;
begin
  Result := Self.Tile;
end;

function TReflectGroundItem.GetMainScreenPoint: TPoint;
begin
  Result := Reflect.Tiles.TileToMs(Self.GetTile);
end;

{$IFNDEF CODEINSIGHT}
procedure TReflectGroundItemArray.GetGroundItemsAt(Tile: TPoint; BaseX, BaseY,
  Plane: Integer);
var
  Id, Quantity, Iteration, Start, I: Integer;
  Temp: TReflectGroundItemArray;
begin
  Reflect.Mem.Get3DObject(ckNull, ckGroundArray, Client_GroundItems, 0, 0,
    Plane, Tile.X, Tile.Y);
  if HookCache[ckGroundArray][0] < 1 then
    Exit;
  for I := 0 to 999 do
    if HookCache[ckGroundList][I] = 0 then
    begin
      Start := I;
      Break;
    end;
  Reflect.Mem.GetObject(ckGroundArray, ckGroundList, LinkedList_Head, Start, 0);
  Reflect.Mem.GetObject(ckGroundList, ckGroundList, Node_next, Start + 1, Start);
  SetLength(Temp, 128);
  while (HookCache[ckGroundList][Start + Iteration] > 0) and
    (HookCache[ckGroundList][Start + Iteration] <>
    HookCache[ckGroundList][Start + Iteration + 1]) do
  begin
    Id := Reflect.Smart.GetFieldInt(
      HookCache[ckGroundList][Start + Iteration + 1], Item_Id);
    if (Id < 0) or (Id > 10000) then
      Break;
    Temp[Iteration].Id := Id;
    Temp[Iteration].Tile.X := Tile.X + BaseX;
    Temp[Iteration].Tile.Y := Tile.Y + BaseY;
    Temp[Iteration].Reference :=
      HookCache[ckGroundList][Start + Iteration + 1];
    Reflect.Mem.GetObject(
      ckGroundList, ckGroundList, Node_Next, Start + Iteration + 2, Start + Iteration + 1);
    Inc(Iteration);
  end;
  SetLength(Temp, Iteration);
  Self := Temp;
end;

procedure TReflectGroundItemArray.GetAll(Distance: Integer = 103);
var
   X, Y, BaseX, BaseY, Plane, L, I, H, HighX, HighY: Integer;
   TempArray, TempArray2: TReflectGroundItemArray;
   Position: TTile;
begin
  Reflect.Mem.FreeObjects(ckGroundList, False);
  Position := Reflect.Internals.GetGlobalTile;
  Distance := Round(Distance / 2);
  BaseX := Reflect.Internals.BaseX;
  BaseY := Reflect.Internals.BaseY;
  Position := Point(Position.X - BaseX, Position.Y - BaseY);
  Plane := Reflect.Tiles.GetPlane;
  HighX := Position.X + Distance;
  HighY := Position.Y + Distance;
  if HighX > 103 then
    HighX := 103;
  if HighY > 103 then
    HighY := 103;
  SetLength(Self, 10817);
  for X := Position.X - Distance to HighX do
    for Y := Position.Y - Distance to HighY do
    begin
      SetLength(TempArray, 0);
      TempArray.GetGroundItemsat(
        Point(X, Y), BaseX, BaseY, Plane);
      Reflect.Mem.FreeObjects(ckGroundArray, False);
      L := Length(TempArray);
      if (L > 0) then
      begin
        SetLength(TempArray2, Length(TempArray2) + L);
        H := Length(TempArray2);
        for I := 0 to High(TempArray) do
          TempArray2[H - L + I] := TempArray[I];
      end;
    end;
  Self := TempArray2;
end;
{$ENDIF}

procedure TReflectGroundItemArray.GetAt(RealTile: TTile);
var
  BaseX, BaseY, Plane: Integer;
begin
  Reflect.Mem.FreeObjects(ckGroundList, False);
  BaseX := Reflect.Internals.BaseX;
  BaseY := Reflect.Internals.BaseY;
  Plane := Reflect.Tiles.GetPlane;
  Self.GetGroundItemsAt(
    Point(RealTile.X - BaseX, RealTile.Y - BaseY), BaseX, BaseY, Plane);
  Reflect.Mem.FreeObjects(ckGroundArray, False);
  Reflect.Mem.FreeObjects(ckGroundList, False);
end;

procedure TReflectGroundItemArray.Get(Distance: Integer = 103);
var
  Temp, Temp1: TReflectGroundItemArray;
  I, H, T: integer;
begin
  if Length(Self) = 0 then
  begin
    Reflect.Logger.Warn('TReflectGroundItemArray is not initialized @.Get');
    Exit;
  end;
  if (Self[0].Id = 0) and (Self[0].Name = '')then
  begin
    Self.GetAll(Distance);
    Exit;
  end;
  Temp := Self;
  Temp.GetAll(Distance);
  if Length(Temp) = 0 then
    Exit;
  if Self[0].Id = 0 then
  begin
    H := High(Temp);
    SetLength(Temp1, H + 1);
    for I := 0 to H do
    begin
      if (Temp[I].GetName = Self[0].Name) then
      begin
        Temp1[T] := Temp[I];
        Inc(T);
      end;
    end;
  end
  else
  begin
    H := High(Temp);
    Setlength(Temp1, H + 1);
    for I := 0 to H do
    begin
      if (Temp[I].GetId = Self[0].Id) then
      begin
        Temp1[T] := Temp[I];
        Inc(T);
      end;
    end;
  end;
  Setlength(Temp1, T);
  Self := Temp1;
  Self.Sort;
end;

function TReflectGroundItem.Find(Distance: Integer = 103): Boolean;
var
  Temp: TReflectGroundItemArray;
begin
  if (Self.Name = '') and (Self.Id = 0) then
  begin
    Reflect.Logger.Warn('TReflectGroundItem is not initialized @ .Find');
    Exit;
  end;
  if Self.Name = '' then
    Temp.Init(Self.Id);
  if Self.Id = 0 then
    Temp.Init(Self.Name);
  Temp.Get(Distance);
  if Length(Temp) = 0 then
    Exit;
  Temp.Sort;
  if Reflect.Tiles.NearTile(Temp[0].GetTile, Distance) then
  begin
    Result := True;
    Self := Temp[0];
  end;
end;
