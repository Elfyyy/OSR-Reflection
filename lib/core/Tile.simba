
type
  TTile3D = record
    X, Y, Z: Extended;
  end;

  TRotation = TTile3D;

  TMatrix = record
    Data: Array of Extended;
  end;

  TScene = record
    TilePosition, PlayerTile, CameraPosition: TTile3D;
    TileRotation, CameraRotation: TRotation;
  end;

var
  CURVESIN, CURVECOS: TIntegerArray;

procedure TReflectionTiles.SetupCurves;
var
  I: Integer;
begin
  SetLength(CURVESIN, 2048);
  SetLength(CURVECOS, 2048);
  for I := 0 to 2047 do begin
    CURVESIN[I] := Trunc(65536.0 * Sin(I * 0.0030679615));
    CURVECOS[I] := Trunc(65536.0 * Cos(I * 0.0030679615));
  end;
end;

function TReflectionTiles.GetBase: TTile;
begin
  Result.X := Reflect.Smart.GetFieldInt(0, Client_BaseX);
  Result.Y := Reflect.Smart.GetFieldInt(0, Client_BaseY);
end;

function TReflectionTiles.GetLocalTile: TTile;
var
  Me: TReflectPointer;
begin
  Me.GetFieldObject(0, Client_LocalPlayer);
  Result.X := Me.GetFieldInt(Actor_WorldX);
  Result.Y:= Me.GetFieldInt(Actor_WorldY);
  Me.Free;
end;

function TReflectionTiles.GetGlobalTile: TTile;
begin
  Result.X := Self.GetBase.X + Self.GetLocalTile.X div 128;
  Result.Y := Self.GetBase.Y + Self.GetLocalTile.Y div 128;
end;

function TReflectionTiles.GetPlane: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(0, Client_Plane);
end;

	{*Credit Krazy_Meerkat*}
function TReflectionTiles.RotateCameraToTile(Tile: TTile): Boolean;
var
  Angle: Extended;
  Me: TPoint;
begin
  Me:= Reflect.Tiles.GetGlobalTile;
  Angle:= (Degrees(ArcTan2(Tile.Y - Me.Y, Tile.X - Me.X))) - 90;
  if (Angle < 0) then
      Angle:= 360 + angle;
  Angle:= 360 - angle;
  Result:= Reflect.Compass.Make(angle);
end;

function TReflectionTiles.DistanceFromTile(Tile: TTile): Integer;
var
  Loc: TPoint;
begin
  if (Tile.X > 100000) or (Tile.X < -100000) or (Tile.Y > 100000) or
    (Tile.Y < -100000) then
    Exit(-1);
  Loc := Reflect.Tiles.GetGlobalTile;
  Result :=  Distance(Tile.X, Tile.Y, Loc.X, Loc.Y);
end;

function TReflectionTiles.NearTile(Tile: TTile; Dist: Integer): Boolean;
begin
  Result := Reflect.Tiles.DistanceFromTile(Tile) < Dist;
end;

function TReflectionTiles.InPolygon(
  const Poly: TPointArray; P : TPoint = Point(-1, -1)): Boolean;
var
  I, J: Integer;
begin
  if P.X = -1 then
    P := Reflect.Tiles.GetGlobalTile;

  J := High(Poly);
  for I := 0 to J do
  begin
    if ((((Poly[I].Y <= P.Y) and (P.Y < Poly[J].Y)) or ((Poly[J].Y <= P.Y) and
     (P.Y < Poly[I].Y)) ) and (P.X < ((Poly[J].X - Poly[I].X) *
     (P.Y - Poly[I].Y) / (Poly[J].Y - Poly[I].Y) + Poly[I].X))) then
     Result := not Result;
    J := I;
  end;
end;

function TReflectionTiles._GetMapScale: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(0, Client_MapScale);
end;

function TReflectionTiles._GetMapOffset: Integer;
begin
  Result :=Reflect.Smart.GetFieldInt(0, Client_MapOffset);
end;

function TReflectionTiles._GetMapAngle: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(0, Client_MapAngle);
end;

function TReflectionTiles._GetRealMapAngle: Integer;
begin
  Result := (Self._GetMapOffset + Self._GetMapAngle) and $7FF;
end;

	{*Credit Dgby714*}
function Ashr(X: Integer; D: Byte): Integer;
var
  Bit: Integer;
  I: Integer;
begin
  Bit := (1 shl 31) and X;
  Result := X;
  for I := 1 to D do
    Result := (Result shr 1) or Bit;
end;

function TReflectionTiles.TileToMM(tile: TPoint): TPoint;
var
  X, Y, Scale, Offset, Angle, _Sin, _Cos: Integer;
  CurrTile: TTile;
begin
  CurrTile := Self.GetLocalTile;
  X := Floor(((Tile.X - Self.GetBase.X) * 4 + 2) - CurrTile.X / 32);
  Y := Floor(((Tile.Y - Self.GetBase.Y) * 4 + 2) - CurrTile.Y / 32);
  if (X * X + Y * Y > 6400) then
    Exit(Point(-1, -1));
  Angle := Self._GetRealMapAngle;
  Scale := Self._GetMapScale + 256;
  _Sin := Floor((CURVESIN[Angle] * 256) / Scale);
  _Cos := Floor((CURVECOS[Angle] * 256) / Scale);
  Result.X := 643 + Ashr(X * _Cos + Y * _Sin, 16);
  Result.Y := 83 - Ashr(Y * _Cos - X * _Sin, 16);
end;

function TReflectionTiles.GetSin(Degree: Integer): Integer;
begin
  Result := Reflect.Smart.GetFieldArrayInt(0, Client_Sine, Degree);
end;

function TReflectionTiles.GetCosin(Degree: Integer): Integer;
begin
  Result := Reflect.Smart.GetFieldArrayInt(0, Client_Cosine, Degree);
end;

function TReflectionTiles.GetTileHeight(Tile: TTile): Integer;
var
  X, Y, CurPlane, GroundSetting: Integer;
begin
  X := Tile.X - Reflect.Smart.GetFieldInt(0, Client_BaseX);
  Y := Tile.Y - Reflect.Smart.GetFieldInt(0, Client_BaseY);
  if ((X < 0) or (X > 104) or (Y < 0) or (Y > 104)) then
    Exit(0);
  CurPlane := Reflect.Smart.GetFieldInt(0, Client_Plane);
  GroundSetting := Reflect.Smart.GetFieldArray3DByte(0,
    Client_TileSettings, 1, X, Y);
  if ((CurPlane < 3) and ((GroundSetting and 2) <> 0)) then
    CurPlane := CurPlane + 1;
  Result := -Reflect.Smart.GetFieldArray3DInt(0, Client_TileHeights,
    CurPlane, X, Y);
end;

function TReflectionInternals.TileToMS(X, Y, Height: Extended): TPoint;
var
  Z, CurveX, CurveY, CurveCosX, CurveCosY, CurveSinX, CurveSinY: Extended;
  TempCalculation: Extended;
  CalculatedScreenPosX, CalculatedScreenPosY: Integer;
begin
  if (X < 128) or (Y < 128) or (X > 13056) or (Y > 13056) then
    Exit(Point(-1, -1));
  Z := -Height;
  X := X - Reflect.Compass.CameraX;
  Y := Y - Reflect.Compass.CameraY;
  Z := Z - Reflect.Compass.CameraZ;
  CurveX := Reflect.Compass.GetYaw;
  CurveY := Reflect.Compass.GetPitch;
  CurveCosX := CURVECOS[Floor(CurveX)];
  CurveCosY := CURVECOS[Floor(CurveY)];
  CurveSinX := CURVESIN[Floor(CurveX)];
  CurveSinY := CURVESIN[Floor(CurveY)];
  TempCalculation := Ashr(Round((CurveCosX * X) + (Y * CurveSinX)), 16);
  Y := Ashr(Round((Y * CurveCosX) - (X * CurveSinX)), 16);
  X := Round(TempCalculation);
  TempCalculation := Ashr(Round((Z * CurveCosY) - (Y * CurveSinY)), 16);
  Y := Ashr(Round((Z * CurveSinY) - ((-CurveCosY) * Y)), 16);
  Z := Round(TempCalculation);
  if (Y < 50) then
    Exit(Point(-1, -1))
  else
  begin
    CalculatedScreenPosX := Round((((Floor(X) shl 9) / Y)));
    IncEx(CalculatedScreenPosX, 256);
    CalculatedScreenPosY := Round((((Floor(Z) shl 9) / Y)));
    IncEx(CalculatedScreenPosY, 170);
    Result := Point(CalculatedScreenPosX, CalculatedScreenPosY);
  end;
end;

function TReflectionTiles.TileToMS(Tile: TTile; XOffset: Integer = 0; YOffset:
  Integer = 0; ZOffset: Integer = 0): TPoint;
var
  X, Y, Z: Integer;
begin
  X := Round((Tile.X - Reflect.Smart.GetFieldInt(
    0, Client_BaseX) + 0.5) * 128) + XOffset;
  Y := Round((Tile.Y - Reflect.Smart.GetFieldInt(
    0, Client_BaseY) + 0.5) * 128) + YOffset;
  Z := Reflect.Tiles.GetTileHeight(Tile) + ZOffset;
  Result := Reflect.Internals.TileToMS(X, Y, Z);
end;
