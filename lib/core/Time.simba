
procedure TReflectTimer.Pause;
begin
  if not Self.IsRunning then
    Exit;
  Self.IsRunning := False;
  Inc(Self.TotalRan, GetSystemTime - Self.StartTime);
end;

procedure TReflectTimer.Reset;
begin
  Self.TotalRan := 0;
  Self.StartTime := self.TotalRan;
  Self.IsRunning := False;
end;

procedure TReflectTimer.Start;
begin
  if Self.IsRunning then
    Exit;
  Self.IsRunning := True;
  Self.StartTime := GetSystemTime;
end;

procedure TReflectTimer.Restart;
begin
  Self.Reset;
  Self.Start;
end;

function TReflectTimer.ElapsedTime: Int64;
begin
  Result := Self.TotalRan;
  if Self.IsRunning then
    Inc(Result, GetSystemTime - Self.StartTime);
end;

  {Credit Zephyrsfury, Nava2 and Rasta Magician}
function TReflectionTime.MsToTime(MS, TheType: Integer): string;
var
  STA: array [0..4] of TVariantArray;
  Time: array [0..2] of Integer;
  i: Integer;
begin
  Result := '';
  if (not(InRange(TheType, 0, High(STA)))) then
  begin
    Writeln('MsToTime', 'TheType: ''' + IntToStr(TheType) + ''' is not a valid value. Using Time_Bare.');
    TheType := Time_Bare;
  end;
  STA[Time_Formal] := [' Hours, ', ' Minutes and ', ' Seconds', False, 0];
  STA[Time_Short] := ['h ', 'm ', 's', False, 2];
  STA[Time_Abbrev] := [' hr ', ' min ', ' sec', False, 0];
  STA[Time_Bare] := [':', ':', '', True, 2];
  STA[Time_FStop] := ['.', '.', '', True, 2];
  ConvertTime(MS, Time[0], Time[1], Time[2]);
  for i := 0 to 2 do
    if (Time[i] > 0) or (STA[TheType][3]) or (i = 2) then
      Result := Result + PadZ(IntToStr(Time[i]), STA[TheType][4]) + STA[TheType][i];
end;

  {Credit Nava2 & Narcle}
function TReflectionTime.TheDate(DateFormat: Integer): string;
var
  Year, Month, Day: Word;
  D: string;
  Mnths, sfx: TStringArray;
begin
  DecodeDate(Date, Year, Month, Day);
  Mnths := ['January', 'February', 'March', 'April', 'May', 'June', 'July',
            'August', 'September', 'October', 'November', 'December'];
  sfx := ['st', 'nd', 'rd'];
  case DateFormat of
    1:
      begin
        if InRange(Day mod 10, 1, 3) and not InRange(Day, 11, 13) then
          D := sfx[(Day mod 10)-1]
        else
          D := 'th';
        Result := Mnths[Month - 1] + ' ' + IntToStr(Day) + D +', ' + IntToStr(Year);
      end;
    2: Result := Padz(IntToStr(Month), 2) + '/' + Padz(IntToStr(Day), 2) + '/' + Copy(IntToStr(Year), 3, 4);
    3: Result := Padz(IntToStr(Day), 2) + '-' + Padz(IntToStr(Month), 2) + '-' + Copy(IntToStr(Year), 3, 4);
  else
    writeln('DateFormat can only be 1, 2, or 3!');
  end;
end;



