type
  TReflectPointer = record
    Reference: Integer;
  end;
  PReflectionSmart = ^TReflectionSmart;

var
  _ReflectionSmartList: array of Pointer;

{$IFNDEF AL}
  procedure Delete(Ptr: Pointer; var Pointers: Array of Pointer); overload;
  var
    I, J: Integer = 0;
    Ptrs: array of Pointer;
  begin
    setLength(Ptrs, Length(Pointers));
    for I := 0 to High(Pointers) do
      if (Pointers[I] <> Ptr) then
      begin
        Ptrs[J] := Pointers[I];
        Inc(J);
      end;
    SetLength(Ptrs, J);
    Pointers := Ptrs;
  end;
{$ENDIF AL}

function TReflectionSmart.Init: Boolean;
begin
  if Self.Target = 0 then
    Exit;
  try
    Self.PID := SmartGetClientPID(Self.Target);
    SetEIOSTarget('libsmartremote', ToStr(Self.PID));
    Self.Graphics.Create(Self.Width, Self.Height, SmartDebugArray(Self.Target));
    SmartSetDebug(Self.Target, True);
    Insert(@Self, _ReflectionSmartList);
    Reflect.Logger.Status('Paired with SMART client %d.', [Self.PID]);
    Result := True;
  except
  end;
end;

procedure TReflectionSmart.Free;
begin
  SmartFreeClient(Self.Target);
  Self.Target := Self.PID := Self.Width := Self.Height := 0;
  Self.ForceNew := True;
  Self.Graphics.Free;
  Self.UserAgent := '';
  Delete(@Self, _ReflectionSmartList);
end;

function TReflectionSmart.Pair: Boolean;
var
  I: Integer;
begin
  if (Self.Target <> 0) or (Self.PID <> 0) then
    Self.Free;
  for I := 0 to SmartGetClients(True) - 1 do
  begin
    Self.Target := SmartPairClient(SmartGetAvailablePID(I));
    if (Self.Target <> 0) and Self.Init then
      Exit(True);
  end;
end;

function TReflectionSmart.GetWorld: string;
begin
  Result := Between('a href="http://oldschool', '.runescape.com/j1',
    GetPage('http://oldschool.runescape.com/slu'));
  if (Result <> '') and InRange(StrToIntDef(ExtractFromStr(Result, Numbers),
    -1), 1, 78) then
    Exit;
  Result := IntToStr(RandomRange(1, 78));
end;

procedure TReflectionSmart.Create;
begin
  Self.Create(765, 503,
    'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0');
end;

procedure TReflectionSmart.Create(
  Width, Height: Integer; UserAgent: string); overload;
var
  World: Variant;
begin
  Self.Width := Width;
  Self.Height := Height;
  Self.UserAgent := UserAgent;
  AddOnTerminate('_TReflectionSmartFreeAll');
  if (not Self.ForceNew) and Self.Pair then
    Exit;
  World := Self.GetWorld;
  Reflect.Logger.Status('Using world %s.', [World]);
  Self.Target := SmartSpawnClient('java.exe', StringReplace(PluginPath, '\',
    '/', [rfReplaceAll]), Format('http://oldschool%s.runescape.com/', [World]),
    'j1', Width, Height, '', UserAgent, '', '');
  if Self.Target = 0 then
    Reflect.Logger.Fatal('Failed to spawn SMART client.');
  if not Self.Init then
  begin
    SmartFreeClient(Self.Target);
    Reflect.Logger.Fatal('Failed to pair SMART client.');
  end;
end;

{$IFDEF AL_SMART  }
  procedure TReflectionSmart.Create(Smart: TSmart); overload;
  begin
    Self.Target := Smart.__Target;
    Self.PID := Smart.__PID;
    Self.Width := Smart.__Width;
    Self.Height := Smart.__Height;
    Self.ForceNew := Smart.__ForceNew;
    Self.Graphics.Create(Self.Width, Self.Height, SmartDebugArray(Self.Target));
    Self.UserAgent := Smart.__UserAgent;
  end;
{$ENDIF AL_SMART}

function TReflectionSmart.GetArraySize(
  Ref: Integer; Hook: THook; Dimension: Integer): Integer;
begin
	Result := SmartGetFieldArraySize(Reflect.Smart.Target, Ref, Hook.Path, Dimension);
end;

function TReflectionSmart.GetFieldObject(Ref: Integer; Hook: THook): Integer;
begin
  Result := SmartGetFieldObject(Reflect.Smart.Target, Ref, Hook.Path);
end;

procedure TReflectPointer.GetFieldObject(Ref: Integer; Hook: THook);
begin
  Self.Reference := SmartGetFieldObject(Reflect.Smart.Target, Ref, Hook.Path);
end;

procedure TReflectPointer.GetFieldObject(Hook: THook); overload;
begin
  Self.GetFieldObject(Self.Reference, Hook);
end;

function TReflectionSmart.GetFieldLongL(Ref: Integer; Hook: THook): Integer;
begin
	Result := SmartGetFieldLongL(Reflect.Smart.Target, Ref, Hook.Path);
end;

function TReflectPointer.GetFieldLongL(Hook: THook): Integer;
begin
  Result := SmartGetFieldLongL(Reflect.Smart.Target, Self.Reference, Hook.Path);
end;

function TReflectionSmart.GetFieldInt(Ref: Integer; Hook: THook): Integer;
begin
	Result := SmartGetFieldInt(Reflect.Smart.Target, Ref, Hook.Path) * Hook.Multi;
end;

function TReflectPointer.GetFieldInt(Hook: THook): Integer;
begin
  Result := SmartGetFieldInt(Reflect.Smart.Target, Self.Reference, Hook.Path)
    * Hook.Multi;
end;

function TReflectionSmart.GetFieldShort(Ref: Integer; Hook: THook): Integer;
begin
	Result := SmartGetFieldShort(Reflect.Smart.Target, Ref, Hook.Path);
end;

function TReflectionSmart.GetFieldFloat(Ref: Integer; Hook: THook): Extended;
begin
	Result := SmartGetFieldFloat(Reflect.Smart.Target, Ref, Hook.Path);
end;

function TReflectionSmart.GetFieldDouble(Ref: Integer; Hook: THook): Extended;
begin
	Result := SmartGetFieldDouble(Reflect.Smart.Target, Ref, Hook.Path);
end;

function TReflectionSmart.GetFieldBoolean(Ref: Integer; Hook: THook): Boolean;
begin
  Result := SmartGetFieldBoolean(Reflect.Smart.Target, Ref, Hook.Path);
end;

function TReflectionSmart.GetFieldByte(Ref: Integer; Hook: THook): Integer;
begin
	Result := SmartGetFieldByte(Reflect.Smart.Target, Ref, Hook.Path);
end;

function TReflectionSmart.GetFieldArrayObject(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayObject(Reflect.Smart.Target, Ref, Hook.Path, Index);
end;

procedure TReflectPointer.GetFieldArrayObject(
  Ref: Integer; Hook: THook; Index: Integer);
begin
	Self.Reference := SmartGetFieldArrayObject(Reflect.Smart.Target, Ref,
    Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayInt(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayInt(Reflect.Smart.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayFloat(
  Ref: Integer; Hook: THook; Index: Integer): Extended;
begin
	Result := SmartGetFieldArrayFloat(Reflect.Smart.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayDouble(
  Ref: Integer; Hook: THook; Index: Integer): Extended;
begin
	Result := SmartGetFieldArrayDouble(Reflect.Smart.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayBoolean(
  Ref: Integer; Hook: THook; Index: Integer): Boolean;
begin
	Result := SmartGetFieldArrayBool(Reflect.Smart.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayLongH(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayLongH(Reflect.Smart.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayLongL(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayLongL(Reflect.Smart.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayByte(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayByte(Reflect.Smart.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayShort(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayShort(Reflect.Smart.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayChar(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayChar(Reflect.Smart.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArray2DObject(
  Ref: Integer; Hook: THook; X, Y: Integer): Integer;
begin
	Result := SmartGetFieldArray2DObject(Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

procedure TReflectPointer.GetFieldArray2DObject(
  Ref: Integer; Hook: THook; X, Y: Integer);
begin
	Self.Reference := SmartGetFieldArray2DObject(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DInt(
  Ref: Integer; Hook: THook; X, Y: Integer): Integer;
begin
	Result := SmartGetFieldArray2DInt(Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DDouble(
  Ref: Integer; Hook: THook; X, Y: Integer): Extended;
begin
	Result := SmartGetFieldArray2DDouble(Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DFloat(
  Ref: Integer; Hook: THook; X, Y: Integer): Extended;
begin
	Result := SmartGetFieldArray2DFloat(Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DBoolean(
  Ref: Integer; Hook: THook; X, Y: Integer): Boolean;
begin
	Result := SmartGetFieldArray2DBoolean(Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DLongH(
  Ref: Integer; Hook: THook; X, Y: Integer): Extended;
begin
	Result := SmartGetFieldArray2DLongH(Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DLongL(
  Ref: Integer; Hook: THook; X, Y: Integer): Extended;
begin
	Result := SmartGetFieldArray2DLongL(Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DByte(
  Ref: Integer; Hook: THook; X, Y: Integer): Integer;
begin
	Result := SmartGetFieldArray2DByte(Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DChar(
  Ref: Integer; Hook: THook; X, Y: Integer): Integer;
begin
	Result := SmartGetFieldArray2DChar(Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DShort(
  Ref: Integer; Hook: THook; X, Y: Integer): Integer;
begin
	Result := SmartGetFieldArray2DShort(Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray3DObject(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Integer;
begin
	Result := SmartGetFieldArray3DObject(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

procedure TReflectPointer.GetFieldArray3DObject(
  Ref: Integer; Hook: THook; X, Y, Z: Integer);
begin
	Self.Reference := SmartGetFieldArray3DObject(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DByte(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Integer;
begin
	Result := SmartGetFieldArray3DByte(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DChar(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Integer;
begin
	Result := SmartGetFieldArray3DChar(Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DShort(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Integer;
begin
	Result := SmartGetFieldArray3DShort(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DInt(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Integer;
begin
	Result := SmartGetFieldArray3DInt(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DFloat(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Extended;
begin
	Result := SmartGetFieldArray3DFloat(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DDouble(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Extended;
begin
	Result := SmartGetFieldArray3DDouble(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DBoolean(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Boolean;
begin
	Result := SmartGetFieldArray3DBoolean(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DLongH(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Extended;
begin
	Result := SmartGetFieldArray3DLongH(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DLongL(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Extended;
begin
	Result := SmartGetFieldArray3DLongL(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

procedure TReflectionSmart.FreeObject(Reference: Integer);
begin
  if Reference > 0 then
    SmartFreeObject(Reflect.Smart.Target, Reference);
end;

procedure TReflectPointer.Free;
begin
  if Self.Reference > 0 then
	  SmartFreeObject(Reflect.Smart.Target, Self.Reference);
end;

function TReflectionSmart.IsPathValid(Ref: Integer; Hook: THook): Boolean;
begin
	Result := SmartIsPathValid(Reflect.Smart.Target, Ref, Hook.Path);
end;

function TReflectionSmart.AreEqual(RefOne, RefTwo: Integer): Boolean;
begin
	Result := SmartIsEqual(Reflect.Smart.Target, RefOne, RefTwo);
end;

function TReflectionSmart.IsNull(Ref: Integer): Boolean;
begin
	Result := SmartIsNull(Reflect.Smart.Target, Ref);
end;

function TReflectionSmart.StringFromString(
  JavaString: Integer; Str: String): Integer;
begin
  Result := SmartStringFromString(Reflect.Smart.Target, JavaString, Str);
end;

function TReflectionSmart.StringFromBytes(Bytes: Integer; Str: String): Integer;
begin
  Result := SmartStringFromBytes(Reflect.Smart.Target, Bytes, Str);
end;

function TReflectionSmart.StringFromChars(Chars: Integer; Str: String): Integer;
begin
  Result := SmartStringFromChars(Reflect.Smart.Target, Chars, Str);
end;

function TReflectionSmart.GetFieldString(Ref: Integer; Hook: THook): String;
var
  StrInt: Integer;
begin
  StrInt := Reflect.Smart.GetFieldObject(Ref, Hook);
  SetLength(Result, 512);
  SetLength(Result, Reflect.Smart.StringFromString(StrInt, Result));
  Result := Replace(Result, 'Â', '', [rfReplaceAll]);
  Result := Replace(Result, #160, #32, [rfReplaceAll]);
  Reflect.Smart.FreeObject(StrInt);
end;

function TReflectionSmart.GetFieldArrayString(
  Ref: Integer; Hook: THook; Index: Integer): String;
var
  StrInt: Integer;
begin
  StrInt := Reflect.Smart.GetFieldArrayObject(Ref, Hook, Index);
  SetLength(Result, 512);
  SetLength(Result, Reflect.Smart.StringFromString(StrInt, Result));
  Result := Replace(Result, 'Â', '', [RfReplaceAll]);
  Result := Replace(Result, #160, #32, [RfReplaceAll]);
  Reflect.Smart.FreeObject(StrInt);
end;

procedure _TReflectionSmartFreeAll;
var
  I: Integer;
begin
  for I := 0 to High(_ReflectionSmartList) do
    if _ReflectionSmartList[I] <> nil then
      PReflectionSmart(_ReflectionSmartList[I])^.Free;
  SetLength(_ReflectionSmartList, 0);
end;
