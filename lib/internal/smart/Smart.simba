
type
  PReflectionSmart = ^TReflectionSmart;

var
  _ReflectionSmartList: array of Pointer;

{$IFNDEF AL}
  procedure Delete(Ptr: Pointer; var Pointers: Array of Pointer); overload;
  var
    I, J: Integer = 0;
    Ptrs: array of Pointer;
  begin
    setLength(Ptrs, Length(Pointers));
    for I := 0 to High(Pointers) do
      if (Pointers[I] <> Ptr) then
      begin
        Ptrs[J] := Pointers[I];
        Inc(J);
      end;
    SetLength(Ptrs, J);
    Pointers := Ptrs;
  end;
{$ENDIF AL}

function TReflectionSmart.Init: Boolean;
begin
  if Self.Target = 0 then
    Exit;
  try
    Self.PID := SmartGetClientPID(Self.Target);
    SetEIOSTarget('libsmartremote', ToStr(Self.PID));
    Self.Graphics.Create(Self.Width, Self.Height, SmartDebugArray(Self.Target));
    SmartSetDebug(Self.Target, True);
    Insert(@Self, _ReflectionSmartList);
    Reflect.Logger.Status('Paired with SMART client %d.', [Self.PID]);
    Result := True;
  except
  end;
end;

procedure TReflectionSmart.Free;
begin
  SmartFreeClient(Self.Target);
  Self.Target := Self.PID := Self.Width := Self.Height := 0;
  Self.ForceNew := True;
  Self.Graphics.Free;
  Self.UserAgent := '';
  Delete(@Self, _ReflectionSmartList);
end;

function TReflectionSmart.Pair: Boolean;
var
  I: Integer;
begin
  if (Self.Target <> 0) or (Self.PID <> 0) then
    Self.Free;
  for I := 0 to SmartGetClients(True) - 1 do
  begin
    Self.Target := SmartPairClient(SmartGetAvailablePID(I));
    if (Self.Target <> 0) and Self.Init then
      Exit(True);
  end;
end;

function TReflectionSmart.GetWorld: string;
var
  Worlds : TIntegerArray;
begin
  if World <> 0 then
  begin
    Reflect.Logger.Warn('''World'' variable will be removed in next release, please use ''SmartWorld''.');
    SmartWorld := World;
  end;

  if (SmartWorld < 299) then
  begin
    Reflect.Logger.Warn('''SmartWorld'' variable not valid, trying recommended world...');
    Result := Between('id=''member-world'' href=''http://oldschool.runescape.com/game?world=', '''>',
    GetPage('http://oldschool.runescape.com/slu'));
    if (Result <> '') and InRange(StrToIntDef(ExtractFromStr(Result, Numbers),
      -1), 301, 394) then begin
      Result := IntToStr(StrToInt(Result) - 300);
      Exit;
    end;

    Reflect.Logger.Warn('Failed to get recommended world, trying random world...');
    Worlds := [301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320,
               321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344,
               345, 346, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368,
               369, 370, 373, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 393, 394];
    Result := IntToStr(Worlds[random(length(Worlds))] - 300);
  end else
    Result := IntToStr(SmartWorld - 300);
end;

{*Credit: Brandon*}
Function TReflectionSmart.GetJavaPath(Console: Boolean): String;
var
  Drive: String;
  CurrentPath: String;

Function getDirectoryName(Directory, Path: String): String;
var
  I: Integer;
  Directories: TStringArray;
Begin
  Directories := GetDirectories(Path);
  For I := 0 To High(Directories) Do
    If ExecRegExpr(Directory, Directories[I]) Then
    Begin
      Result := Directories[I];
      Exit;
    End;
End;

Function findDirectory(Directory, Path: String): Boolean;
Begin
  Result := Length(GetDirectoryName(Directory, Path)) > 0;
End;

Begin
  Drive := Copy(PluginPath, 0, 3);

  If (FindDirectory('Program\sFiles\s\(x86\)', Drive)) Then
  Begin
    CurrentPath := Drive + 'Program Files (x86)\';
  End Else
    CurrentPath := Drive + 'Program Files\';

  If (FindDirectory('Java|java', CurrentPath + '\')) Then
  Begin
    CurrentPath := CurrentPath + 'Java\';
  End Else
    Begin
      Reflect.Logger.Error('Failed To Find Path: '+CurrentPath+'Java\', []);
      Exit;
    End;

  Drive := GetDirectoryName('jre', CurrentPath);
  If (Length(Drive) > 0) Then
  Begin
    If (Console) Then
      CurrentPath := CurrentPath + Drive + '\bin\java.exe'
    Else
      CurrentPath := CurrentPath + Drive + '\bin\javaw.exe';
  End Else
    Begin
      Drive := GetDirectoryName('jdk', CurrentPath);
      If (Console) Then
      CurrentPath := CurrentPath + Drive + 'jre\bin\java.exe'
    Else
      CurrentPath := CurrentPath + Drive + 'jre\bin\javaw.exe';
    End;

  If (FileExists(CurrentPath)) Then
    Result := CurrentPath
  Else
    Reflect.Logger.Error('Failed To Find Java.exe or Javaw.exe. Please add ...\JRE\Bin to your PATH environment variable.', []);
End;

procedure TReflectionSmart.Create;
begin
  Self.CreateSmart(765, 503, SmartUserAgent, SmartShowConsole);
end;

procedure TReflectionSmart.Create(
  Width, Height: Integer; UserAgent: string; ShowConsole : boolean); overload;
begin
  Self.CreateSmart(Width, Height, UserAgent, ShowConsole);
end;

procedure TReflectionSmart.CreateSmart(
  Width, Height: Integer; UserAgent: string; ShowConsole : boolean); overload;
var
  World: Variant;
  JavaString: string;
begin
  Self.Width := Width;
  Self.Height := Height;
  Self.UserAgent := UserAgent;
  AddOnTerminate('_TReflectionSmartFreeAll');

  if (not Self.ForceNew) and Self.Pair then
    Exit;

  World := Self.GetWorld;

  Reflect.Logger.Status('Using world %s.', [World]);
  if ShowConsole then
    JavaString:= 'java.exe'
  else
    JavaString:= 'javaw.exe';

  Self.Target := SmartSpawnClient(JavaString, StringReplace(PluginPath, '\',
    '/', [rfReplaceAll]), Format('http://oldschool%s.runescape.com/', [World]),
    'j1', Width, Height, '', UserAgent, '', '');

  if Self.Target = 0 then
  begin
    Reflect.Logger.Warn('Error while finding default Java, searching for Java...', []);
    JavaString := Reflect.Smart.GetJavaPath(ShowConsole);
    Reflect.Logger.Status('Using '''+JavaString+''' Java path.');

    Self.Target := SmartSpawnClient(JavaString, StringReplace(PluginPath, '\',
      '/', [rfReplaceAll]), Format('http://oldschool%s.runescape.com/', [World]),
      'j1', Width, Height, '', UserAgent, '', '');
  end;

  if Self.Target = 0 then
    Reflect.Logger.Fatal('Failed to spawn SMART client.');
  if not Self.Init then
  begin
    SmartFreeClient(Self.Target);
    Reflect.Logger.Fatal('Failed to pair SMART client.');
  end;
end;

{$IFDEF AL_SMART  }
  procedure TReflectionSmart.Create(Smart: TSmart); overload;
  begin
    Self.Target := Smart.__Target;
    Self.PID := Smart.__PID;
    Self.Width := Smart.__Width;
    Self.Height := Smart.__Height;
    Self.ForceNew := Smart.__ForceNew;
    Self.Graphics.Create(Self.Width, Self.Height, SmartDebugArray(Self.Target));
    Self.UserAgent := Smart.__UserAgent;
  end;
{$ENDIF AL_SMART}

function TReflectionSmart.GetArraySize(
  Ref: Integer; Hook: THook; Dimension: Integer): Integer;
begin
	Result := SmartGetFieldArraySize(Self.Target, Ref, Hook.Path, Dimension);
end;

function TReflectionSmart.GetFieldObject(Ref: Integer; Hook: THook): Integer;
begin
  Result := SmartGetFieldObject(Self.Target, Ref, Hook.Path);
end;

procedure TReflectPointer.GetFieldObject(Ref: Integer; Hook: THook);
begin
  Self.Reference := SmartGetFieldObject(Reflect.Smart.Target, Ref, Hook.Path);
end;

procedure TReflectPointer.GetFieldObject(Hook: THook); overload;
begin
  Self.GetFieldObject(Self.Reference, Hook);
end;

function TReflectionSmart.GetFieldLongL(Ref: Integer; Hook: THook): Integer;
begin
	Result := SmartGetFieldLongL(Self.Target, Ref, Hook.Path);
end;

function TReflectPointer.GetFieldLongL(Hook: THook): Integer;
begin
  Result := SmartGetFieldLongL(Reflect.Smart.Target, Self.Reference, Hook.Path);
end;

function TReflectionSmart.GetFieldInt(Ref: Integer; Hook: THook): Integer;
begin
	Result := SmartGetFieldInt(Self.Target, Ref, Hook.Path) * Hook.Multi;
end;

function TReflectPointer.GetFieldInt(Hook: THook): Integer;
begin
  Result := SmartGetFieldInt(Reflect.Smart.Target, Self.Reference, Hook.Path)
    * Hook.Multi;
end;

function TReflectionSmart.GetFieldShort(Ref: Integer; Hook: THook): Integer;
begin
	Result := SmartGetFieldShort(Self.Target, Ref, Hook.Path);
end;

function TReflectionSmart.GetFieldFloat(Ref: Integer; Hook: THook): Extended;
begin
	Result := SmartGetFieldFloat(Self.Target, Ref, Hook.Path);
end;

function TReflectionSmart.GetFieldDouble(Ref: Integer; Hook: THook): Extended;
begin
	Result := SmartGetFieldDouble(Self.Target, Ref, Hook.Path);
end;

function TReflectionSmart.GetFieldBoolean(Ref: Integer; Hook: THook): Boolean;
begin
  Result := SmartGetFieldBoolean(Self.Target, Ref, Hook.Path);
end;

function TReflectionSmart.GetFieldByte(Ref: Integer; Hook: THook): Integer;
begin
	Result := SmartGetFieldByte(Self.Target, Ref, Hook.Path);
end;

function TReflectionSmart.GetFieldArrayObject(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayObject(Self.Target, Ref, Hook.Path, Index);
end;

procedure TReflectPointer.GetFieldArrayObject(
  Ref: Integer; Hook: THook; Index: Integer);
begin
	Self.Reference := SmartGetFieldArrayObject(Reflect.Smart.Target, Ref,
    Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayInt(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayInt(Self.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayFloat(
  Ref: Integer; Hook: THook; Index: Integer): Extended;
begin
	Result := SmartGetFieldArrayFloat(Self.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayDouble(
  Ref: Integer; Hook: THook; Index: Integer): Extended;
begin
	Result := SmartGetFieldArrayDouble(Self.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayBoolean(
  Ref: Integer; Hook: THook; Index: Integer): Boolean;
begin
	Result := SmartGetFieldArrayBool(Self.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayLongH(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayLongH(Self.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayLongL(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayLongL(Self.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayByte(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayByte(Self.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayShort(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayShort(Self.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArrayChar(
  Ref: Integer; Hook: THook; Index: Integer): Integer;
begin
	Result := SmartGetFieldArrayChar(Self.Target, Ref, Hook.Path, Index);
end;

function TReflectionSmart.GetFieldArray2DObject(
  Ref: Integer; Hook: THook; X, Y: Integer): Integer;
begin
	Result := SmartGetFieldArray2DObject(Self.Target, Ref, Hook.Path, X, Y);
end;

procedure TReflectPointer.GetFieldArray2DObject(
  Ref: Integer; Hook: THook; X, Y: Integer);
begin
	Self.Reference := SmartGetFieldArray2DObject(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DInt(
  Ref: Integer; Hook: THook; X, Y: Integer): Integer;
begin
	Result := SmartGetFieldArray2DInt(Self.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DDouble(
  Ref: Integer; Hook: THook; X, Y: Integer): Extended;
begin
	Result := SmartGetFieldArray2DDouble(Self.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DFloat(
  Ref: Integer; Hook: THook; X, Y: Integer): Extended;
begin
	Result := SmartGetFieldArray2DFloat(Self.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DBoolean(
  Ref: Integer; Hook: THook; X, Y: Integer): Boolean;
begin
	Result := SmartGetFieldArray2DBoolean(Self.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DLongH(
  Ref: Integer; Hook: THook; X, Y: Integer): Extended;
begin
	Result := SmartGetFieldArray2DLongH(Self.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DLongL(
  Ref: Integer; Hook: THook; X, Y: Integer): Extended;
begin
	Result := SmartGetFieldArray2DLongL(Self.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DByte(
  Ref: Integer; Hook: THook; X, Y: Integer): Integer;
begin
	Result := SmartGetFieldArray2DByte(Self.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DChar(
  Ref: Integer; Hook: THook; X, Y: Integer): Integer;
begin
	Result := SmartGetFieldArray2DChar(Self.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray2DShort(
  Ref: Integer; Hook: THook; X, Y: Integer): Integer;
begin
	Result := SmartGetFieldArray2DShort(Self.Target, Ref, Hook.Path, X, Y);
end;

function TReflectionSmart.GetFieldArray3DObject(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Integer;
begin
	Result := SmartGetFieldArray3DObject(
    Self.Target, Ref, Hook.Path, X, Y, Z);
end;

procedure TReflectPointer.GetFieldArray3DObject(
  Ref: Integer; Hook: THook; X, Y, Z: Integer);
begin
	Self.Reference := SmartGetFieldArray3DObject(
    Reflect.Smart.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DByte(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Integer;
begin
	Result := SmartGetFieldArray3DByte(
    Self.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DChar(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Integer;
begin
	Result := SmartGetFieldArray3DChar(Self.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DShort(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Integer;
begin
	Result := SmartGetFieldArray3DShort(
    Self.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DInt(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Integer;
begin
	Result := SmartGetFieldArray3DInt(
    Self.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DFloat(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Extended;
begin
	Result := SmartGetFieldArray3DFloat(
    Self.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DDouble(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Extended;
begin
	Result := SmartGetFieldArray3DDouble(
    Self.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DBoolean(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Boolean;
begin
	Result := SmartGetFieldArray3DBoolean(
    Self.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DLongH(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Extended;
begin
	Result := SmartGetFieldArray3DLongH(
    Self.Target, Ref, Hook.Path, X, Y, Z);
end;

function TReflectionSmart.GetFieldArray3DLongL(
  Ref: Integer; Hook: THook; X, Y, Z: Integer): Extended;
begin
	Result := SmartGetFieldArray3DLongL(
    Self.Target, Ref, Hook.Path, X, Y, Z);
end;

procedure TReflectionSmart.FreeObject(Reference: Integer);
begin
  if Reference > 0 then
    SmartFreeObject(Self.Target, Reference);
end;

function TReflectPointer.NotNull: Boolean;
begin
  Result := Self.Reference > 0;
end;

procedure TReflectPointer.Free;
begin
  if Self.NotNull then
	  SmartFreeObject(Reflect.Smart.Target, Self.Reference);
  Self.Reference := 0;
end;

function TReflectionSmart.IsPathValid(Ref: Integer; Hook: THook): Boolean;
begin
	Result := SmartIsPathValid(Self.Target, Ref, Hook.Path);
end;

function TReflectionSmart.AreEqual(RefOne, RefTwo: Integer): Boolean;
begin
	Result := SmartIsEqual(Self.Target, RefOne, RefTwo);
end;

function TReflectionSmart.IsNull(Ref: Integer): Boolean;
begin
	Result := SmartIsNull(Self.Target, Ref);
end;

function TReflectionSmart.StringFromString(
  JavaString: Integer; Str: String): Integer;
begin
  Result := SmartStringFromString(Self.Target, JavaString, Str);
end;

function TReflectionSmart.StringFromBytes(Bytes: Integer; Str: String): Integer;
begin
  Result := SmartStringFromBytes(Self.Target, Bytes, Str);
end;

function TReflectionSmart.StringFromChars(Chars: Integer; Str: String): Integer;
begin
  Result := SmartStringFromChars(Self.Target, Chars, Str);
end;

function TReflectionSmart.GetFieldString(Ref: Integer; Hook: THook): String;
var
  StrInt: Integer;
begin
  StrInt := Self.GetFieldObject(Ref, Hook);
  SetLength(Result, 512);
  SetLength(Result, Self.StringFromString(StrInt, Result));
  Result := Replace(Result, 'Â', '', [rfReplaceAll]);
  Result := Replace(Result, #160, #32, [rfReplaceAll]);
  Self.FreeObject(StrInt);
end;

function TReflectionSmart.GetFieldArrayString(
  Ref: Integer; Hook: THook; Index: Integer): String;
var
  StrInt: Integer;
begin
  StrInt := Self.GetFieldArrayObject(Ref, Hook, Index);
  SetLength(Result, 512);
  SetLength(Result, Self.StringFromString(StrInt, Result));
  Result := Replace(Result, 'Â', '', [RfReplaceAll]);
  Result := Replace(Result, #160, #32, [RfReplaceAll]);
  Self.FreeObject(StrInt);
end;

procedure _TReflectionSmartFreeAll;
var
  I: Integer;
begin
  for I := 0 to High(_ReflectionSmartList) do
    if _ReflectionSmartList[I] <> nil then
      PReflectionSmart(_ReflectionSmartList[I])^.Free;
  SetLength(_ReflectionSmartList, 0);
end;
