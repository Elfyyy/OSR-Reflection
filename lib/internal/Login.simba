function TReflectionLogin.SortWorlds(Members: Boolean; PVP: Boolean = False): TIntegerArray;
var
  PVPW, FreeW, MembW, DeadW: TIntegerArray;
begin
  PVPW := [325, 337];
  DeadW := [317, 319, 321, 345, 357, 360, 378];
  FreeW := [301, 308, 316, 326, 335, 381, 382, 383, 384, 385, 393, 394];
  MembW := [302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314,
            318, 320, 322, 327, 328, 329, 330, 333, 334, 336,
            338, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353,
            354, 358, 359, 361, 362, 365, 366, 367, 368, 369,
            370, 373, 374, 375, 376, 377, 386];
  If Members then
    Result := MembW
  else
    Result := FreeW;
  If (Members) and (PVP) then
    Result := CombineIntArray(PVPW, MembW);
end;

function TReflectionLogin.RandomWorld(Members: Boolean; PVP: Boolean = False): Integer;
var
  Worlds: TIntegerArray;
begin
  Worlds := Reflect.Login.SortWorlds(Members, PVP);
  Result := Worlds[Random(Length(Worlds))];
end;

function TReflectionLogin.GetClientState: Integer;
begin
  Result := (Reflect.Smart.GetFieldInt(0, Client_LoginState));
end;

function TReflectionLogin.AtLogin: Boolean;
begin
  Result := Reflect.Login.GetClientState = 10;
end;

function TReflectionLogin.AtWorldScreen: Boolean;
begin
  Result := CountColor(0, 2, 30, 100, 400) > 10000;
end;

function TReflectionLogin.AtLobby: Boolean;
var
  W: TReflectWidget;
begin
  Result := W.IsValid(Interface_Lobby, Widget_Lobby_Close_Child);
  W.Free;
end;

function TReflectionLogin.OpenWorldSelector: Boolean;
const
  ClickSwitchButton: TBox = [5, 465, 105, 495];
var
  T: TReflectTimer;
  Tries: Integer;
begin
  if Reflect.Login.AtWorldScreen then
    Exit(True);
  repeat
    If not Reflect.Login.AtLogin then
      Exit(False);
    Inc(Tries);
    Reflect.Mouse.Move(ClickSwitchButton, Mouse_Left);
    T.Start;
    while (not Result) and (T.ElapsedTime < 5000) do
      Result := Reflect.Login.AtWorldScreen;
  until(Result)or(Tries > 4);
end;

function TReflectionLogin.ExitWorldSelector: Boolean;
const
  ClickCancelButton: TBox = [709, 4, 753, 16];
var
  T: TReflectTimer;
  Tries: Integer;
begin
  if not Reflect.Login.AtWorldScreen then
    Exit(True);
  repeat
    if not Reflect.Login.AtWorldScreen then
      Exit(True);
    Inc(Tries);
    Reflect.Mouse.Move(ClickCancelButton, Mouse_Left);
    T.Start;
    while (not Result) and (T.ElapsedTime < 5000) do
      Result := (not Reflect.Login.AtWorldScreen);
  until(Result)or(Tries > 4);
end;

function TReflectionLogin.SelectWorld(World: Integer): Boolean;
const
  Worlds: TIntegerArray = [301, 321, 345, 369,
                           302, 322, 346, 370,
                           303, 325, 349, 373,
                           304, 326, 350, 374,
                           305, 327, 351, 375,
                           306, 328, 352, 376,
                           308, 329, 353, 377,
                           309, 330, 354, 378,
                           310, 333, 357, 381,
                           311, 334, 358, 382,
                           312, 335, 359, 383,
                           313, 336, 360, 384,
                           314, 337, 361, 385,
                           316, 338, 362, 386,
                           317, 341, 365, 393,
                           318, 342, 366, 394,
                           319, 343, 367, -1,
                           320, 344, 368, -1];
var
  I: Integer;
  T: TReflectTimer;
begin
  if (not InIntArrayEx(Worlds, I, World)) or (Not Reflect.Login.AtWorldScreen) then
    Exit(False);
  Wait(RandomRange(250, 500));
  Reflect.Mouse.Move(Reflect.Math.GridBox(I + 1, 4, 18, 87, 18, 93, 24, Point(242, 58)),
    Mouse_Left);
  T.Start;
  while (Reflect.Login.AtWorldScreen) and (T.ElapsedTime < 5000) do
    Wait(RandomRange(100, 200));
  Result := (not Reflect.Login.AtWorldScreen);
end;

function TReflectionLogin.GetLoginState: Integer;
var
  ColorCount: Integer;
begin
  Result := -1;
  case Reflect.Login.GetClientState of
    10:
    begin
      ColorCount := CountColor(Login_Text_Yellow, 304, 237, 460, 256);
      If (ColorCount = 479) then
        Exit(Login_ExistingUser);
      ColorCount := CountColor(Login_Text_Yellow, 204, 165, 570, 253);
      case ColorCount of
        799, 863: Result := Login_EnterUser;
        738, 1539, 1073, 492, 1721, 906, 1227,
        1231, 1136, 777, 1700, 1666, 1783, 439, 210,
        1017, 1037, 1053, 1022: Result := Login_Problems;
      end;
    end;
    20: Result := Login_Connecting;
    30:
    If Reflect.Login.AtLobby then
      Result := Login_ClickToPlay;
  end;
end;

function TReflectionLogin.GetCursor: Byte;
var
  TimeOut: UInt64;
begin
  TimeOut := GetTickCount64 + Random(3000, 4000);
  repeat
    if (CountColor(Login_Text_Yellow, Login_LoginBox.X1, Login_LoginBox.Y1,
      Login_LoginBox.X2, Login_LoginBox.Y2) > 10) then
        Exit(Login_LoginBox_Byte);
    if (CountColor(Login_Text_Yellow, Login_PasswordBox.X1,
      Login_PasswordBox.Y1, Login_PasswordBox.X2,
      Login_PasswordBox.Y2) > 10) then
        Exit(Login_PasswordBox_Byte);
    Wait(Random(25, 50));
  until (GetTickCount64 > TimeOut);
end;

procedure TReflectionLogin.SetCursor(const New: Integer);
var
  T: TReflectTimer;
begin
  if (Reflect.Login.GetCursor = New) then
    Exit;
  T.Start;
  while (Reflect.Login.GetCursor <> New) and
        (Reflect.Login.GetLoginState = Login_EnterUser) and
        (T.ElapsedTime < 8000) do
  begin
    Reflect.Keyboard.Send('{tab}');
    Wait(Random(350, 650));
  end;
end;

function TReflectionLogin.LoginProblems: Boolean;
var
  ColorCount: Integer;
begin
  ColorCount := CountColor(Login_Text_Yellow, 204, 165, 570, 253);
  case ColorCount of
    738, 1539, 1136: Reflect.Logger.Fatal(
   'We''ve been forced to terminate due to failing logging into your account.');

    1073, 777, 1227: {Retry}
    begin
      Reflect.Logger.Warn('Already logged in, retry');
      Wait(15000+Random(10000));
      Reflect.Mouse.Move(238, 309, 364, 334, Mouse_Left);
    end;

    1721: {Too many incorrect logins}
    begin
      Reflect.Logger.Warn('Too many incorrect logins, waiting for 5 minutes');
      Wait(RandomRange(1000*60*5, 1000*60*6));
      Reflect.Mouse.Move(238, 309, 364, 334, Mouse_Left);
    end;
    906: {World is full}
    begin
      Reflect.Logger.Warn('World is full, re-trying');
      Reflect.Mouse.Move(238, 309, 364, 334, Mouse_Left);
      Wait(RandomRange(1000, 2000));
    end;
    492, 1231, 1666, 1017, 1037, 1053, 1022: {World change}
    begin
      Reflect.Logger.Warn('Changing world.');
      Reflect.Mouse.Move(IntToBox(5, 465, 105, 495), Mouse_Left);
      Wait(RandomRange(500, 700));
      if Reflect.Login.SelectWorld(RandomWorld(True)) then
        Wait(RandomRange(550, 650));
      Reflect.Mouse.Move(238, 309, 364, 334, Mouse_Left);
    end;
    1700, 1783: {F2p world needed}
    begin
      Reflect.Logger.Warn('Changing world.');
      Reflect.Mouse.Move(IntToBox(5, 465, 105, 495), Mouse_Left);
      Wait(RandomRange(500, 700));
      if Reflect.Login.SelectWorld(RandomWorld(False)) then
        Wait(RandomRange(550, 650));
      Reflect.Mouse.Move(238, 309, 364, 334, Mouse_Left);
    end;
    439, 210: {PVP world -> Exit}
    begin
      Reflect.Mouse.Move(IntToBox(408, 310, 517, 333), Mouse_Left);
      Reflect.Logger.Warn('Changing world.');
      Reflect.Mouse.Move(IntToBox(5, 465, 105, 495), Mouse_Left);
      Wait(RandomRange(500, 700));
      if Reflect.Login.SelectWorld(RandomWorld(True)) then
        Wait(RandomRange(550, 650));
    end;
  end;
end;

Procedure TReflectionLogin.EnterDetails(Username, Password: String);
var
  Clear: array [0..1] of Boolean;
  Timeout: UInt64 := GetTickCount64 + Random(7500, 8000);
begin
  Clear[Login_LoginBox_Byte] := CountColor(Login_Text_White, Login_LoginBox.X1,
                                           Login_LoginBox.Y1, Login_LoginBox.X2,
                                           Login_LoginBox.Y2);

  Clear[Login_PasswordBox_Byte] := CountColor(Login_Text_White,
                                              Login_PasswordBox.X1,
                                              Login_PasswordBox.Y1,
                                              Login_PasswordBox.X2,
                                              Login_PasswordBox.Y2);

  if (Reflect.Login.GetCursor <> Login_LoginBox_Byte) then
    Reflect.Login.SetCursor(Login_LoginBox_Byte);
  if (Clear[Login_LoginBox_Byte]) then
    while (CountColor(Login_Text_White, Login_LoginBox.X1, Login_LoginBox.Y1, Login_LoginBox.X2, Login_LoginBox.Y2) > 5) and (Timeout > GetTickCount64) do
    begin
      Reflect.Keyboard.Send('{backspace}');
      Wait(Random(30, 120));
    end;
  Reflect.Keyboard.Send(Username);
  if (Reflect.Login.GetCursor <> Login_PasswordBox_Byte) then
    Reflect.Login.SetCursor(Login_PasswordBox_Byte);
  if (Clear[Login_PasswordBox_Byte]) then
    while (CountColor(Login_Text_White, Login_PasswordBox.X1,
           Login_PasswordBox.Y1, Login_PasswordBox.X2,
           Login_PasswordBox.Y2) > 5) and (Timeout > GetTickCount64) do

    begin
      Reflect.Keyboard.Send('{backspace}');
      Wait(Random(30, 120));
    end;
  Reflect.Keyboard.Send(Password+'{enter}');
  Wait(1000+Random(500));
end;

function TReflectionLogin.LoginPlayer(Username, Password: string): Boolean;
var
  CurState, Tries: Integer;
  T, TLogged: TReflectTimer;
begin
  If (Reflect.Login.GetClientState = 30) and (Not Reflect.Login.AtLobby) then
    Exit(True);
  If Self.ExitWorldSelector then
    Wait(500+Random(700));
  repeat
    CurState := Reflect.Login.GetLoginState;
    If CurState = -1 then
      Inc(Tries);
    T.Start;
    case CurState of
      LOGIN_ExistingUser: Reflect.Mouse.Move(Login_ExistingUserBox, Mouse_Left);
      LOGIN_EnterUser: Reflect.Login.EnterDetails(Username, Password);
      LOGIN_Problems: Reflect.Login.LoginProblems;
      LOGIN_Connecting: Wait(RandomRange(500, 1000));
      LOGIN_ClickToPlay:
      begin
        Wait(RandomRange(300, 600));
        Reflect.Mouse.Move(330, 315, 483, 360, Mouse_Left);
        TLogged.Start;
        repeat
          Wait(RandomRange(100, 200));
        until(TLogged.ElapsedTime > 3000)or((Reflect.Login.GetClientState = 30) and (Not Reflect.Login.AtLobby));
      end;
      else
        Wait(RandomRange(100, 200));
    end;
    If Not (InIntArray([Login_Connecting, Login_ClickToPlay], CurState))then
      While(not CurState = Reflect.Login.GetLoginState + 1) and
           (T.ElapsedTime < 5000) do
        Wait(RandomRange(100, 200));
  until(Tries > 30)or((Reflect.Login.GetClientState = 30) and (Not Reflect.Login.AtLobby));
  Result := ((Reflect.Login.GetClientState = 30) and (Not Reflect.Login.AtLobby));
end;
