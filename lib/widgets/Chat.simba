
function TReflectionChat.GetTextOnLine(Line: Integer; RemoveName: Boolean = False): String;
var
  I, J: Integer;
  ChatWidget, ChatChild: TReflectWidget;
begin
  ChatWidget.GetWidget(Widget_Chat_Container, Widget_Chat_Chat_Container);
  I := (Line * 2) - 2;
  J := I + 1;
  for I to J do
    if (I = j) or (not RemoveName) then
    begin
      ChatChild.GetChild(ChatWidget, I);
      Result := Result + Reflect.Text.RemoveFormatting(ChatChild.GetText);
    end;
  ChatWidget.Free;
  ChatChild.Free;
end;

function TReflectionChat.GetLastMessage(RemoveName: Boolean = False): String;
begin
  Result := Self.GetTextOnLine(1, RemoveName);
end;

function TReflectionChat.Find(Text: String): Boolean;
var
  I: Integer;
  Txt: String
begin
  for I := 1 to 8 do
    Txt := Txt + Self.GetTextOnLine(I);
  Result := Pos(Text, Txt) > 0;
end;

function TReflectionChat.GetChatIndices: TIntegerArray;
var
  Wid, Child: TReflectWidget;
  I, J, K: Integer;
begin
  for I := 0 to 600 do
    for J := 0 to 6 do
    begin
      if not Wid.Exists(I, J) then
          Continue;
        Wid.GetWidget(I, J);
        if Wid.GetText = 'Click here to continue' then
        begin
          Wid.Free;
          SetLength(Result, 2);
          Exit([I, J]);
        end;
        if Wid.HasChild then
        begin
          for K := 0 to 6 do
          begin
            Child.GetChild(Wid, K);
            if Child.GetText = 'Click here to continue' then
            begin
              Wid.Free;
              Child.Free;
              SetLength(Result, 3);
              Exit([I, J, K]);
            end;
            Child.Free;
          end;
        end;
    end;
end;

function TReflectionChat.NpcChatOpen: Boolean;
begin
  Result := Self.GetChatIndices <> [];
end;

function TReflectionChat.NpcChooseOption(Options: TStringArray): Boolean;
var
  Wid, Child : TReflectWidget;
  I, J, K, L : Integer;
  daString : string;
begin
  for I := 0 to 600 do
    for J := 0 to 6 do
    begin
      if not Wid.Exists(I, J) then
        Continue();

      Wid.GetWidget(I, J);
      daString := Wid.GetText();

      for l:=0 to high(Options) do
        if pos(Options[l], daString) > 0 then
        begin
          Wid.Interact();
          Wid.Free();
          Exit(True);
        end;

      if Wid.HasChild() then
      begin
        for K := 0 to 6 do
        begin
          Child.GetChild(Wid, K);
          daString := Child.GetText();
          for l:=0 to high(Options) do
            if pos(Options[l], daString) > 0 then
            begin
              Child.Interact();
              Child.Free();
              Wid.Free();
              Exit(True);
            end;

          Child.Free();
        end;
      end;
      Wid.Free();
    end;
end;

function TReflectionChat.NpcChooseOption(Option: string): Boolean; overload;
begin
  Result := Reflect.Chat.NpcChooseOption([Option]);
end;

function TReflectionChat.NpcClickToContinue: Boolean;
begin
  Result := Reflect.Chat.NpcChooseOption(['Click here to continue', 'Click to continue']);
end;

function TReflectionChat.doConversation(Options : TStringArray = []): Boolean;
var
  Timer : TReflectTimer;
  Temp : TStringArray;
begin
  Temp := Options;
  setLength(Temp, Length(Temp) + 2);
  Temp[High(Temp)] := 'Click here to continue';
  Temp[High(Temp) - 1] := 'Click to continue';

  Timer.Start;
  while Timer.Elapsedtime < 2500 do
  begin
    if Reflect.Chat.NpcChooseOption(Temp) then
    begin
      Result := True;
      Timer.Restart;
    end;
    Wait(RandomRange(500, 1500));
  end;
end;
