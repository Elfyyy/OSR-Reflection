
function TReflectionChat.GetTextOnLine(Line: Integer; RemoveName: Boolean = False): String;
var
  I, J: Integer;
  ChatWidget, ChatChild: TReflectWidget;
begin
  ChatWidget.GetWidget(Widget_Chat_Container, 2);
  I := (Line * 2) - 2;
  J := I + 1;
  for I to J do
    if (I = j) or (not RemoveName) then
    begin
      ChatChild.GetChild(ChatWidget, I);
      Result := Result + Reflect.Text.RemoveFormatting(ChatChild.GetText);
    end;
  ChatWidget.Free;
  ChatChild.Free;
end;

function TReflectionChat.GetLastMessage(RemoveName: Boolean = False): String;
begin
  Result := Self.GetTextOnLine(1, RemoveName);
end;

function TReflectionChat.Find(Text: String): Boolean;
var
  I: Integer;
  Txt: String
begin
  for I := 1 to 8 do
    Txt := Txt + Self.GetTextOnLine(I);
  Result := Pos(Text, Txt) > 0;
end;

function TReflectionChat.NpcChooseOption(Options: TStringArray): Boolean;
var
  NpcWidget: TReflectWidget;
  I, J, S: Integer;
begin
  for I := 0 to 600 do
    for J := 0 to 6 do
    begin
    if (InIntArray(
      [90, 137, 182, 239, 261, 271, 274, 320, 429, 432, 548, 589, 593], I))
      or (not NpcWidget.Exists(I, J)) then
      continue;
    if (not NpcWidget.Exists(I, J)) then
      Continue;
    NpcWidget.GetWidget(I, J);
    for S := 0 to High(Options) do
      if Pos(Options[S], Trim(NpcWidget.GetText)) > 0 then
        begin
          NpcWidget.Interact;
          NpcWidget.Free;
          Exit(True);
        end;
    NpcWidget.Free;
  end;
end;

function TReflectionChat.NpcChooseOption(Option: string): Boolean; overload;
begin
  Result := Reflect.Chat.NpcChooseOption([Option]);
end;

function TReflectionChat.NpcClickToContinue: Boolean;
begin
  Result := Reflect.Chat.NpcChooseOption('continue');
end;



