
function TReflectInvItem.GetName: string;
var
  Line: string;
  Id: Integer;
begin
  Id := Self._Id;
  if not InRange(Id, 0, 12856) then
    Exit;
  Line := ItemCache.GetStrings(Id);
  Result := Between('''name'': ''', ''',', Line);
end;

function TReflectInvItem.GetInvActions: TStringArray;
var
  Line, Temp: string;
  Id: Integer;
begin
  Id := Self._Id;
  if not InRange(Id, 0, 12856) then
    Exit;
  Line := ItemCache.GetStrings(Id);
  Temp := Between('''actions'': [''', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectInvItem.GetGroundActions: TStringArray;
var
  Line, Temp: string;
  Id: Integer;
begin
  Id := Self._Id;
  if not InRange(Id, 0, 12856) then
    Exit;
  Line := ItemCache.GetStrings(Id);
  Temp := Between('''groundActions'': [''', ']', Line);
  Temp := Copy(Temp, 1, Length(Temp) - 1);
  Result := Explode(''',''',Temp);
end;

function TReflectInvItem.GetHighAlchValue: Integer;
var
  Line: string;
  Id: Integer;
begin
  Id := Self._Id;
  if not InRange(Id, 0, 12856) then
    Exit;
  Line := ItemCache.GetStrings(Id);
  Result := StrToInt(Between('highAlchValue'': ', '}', Line));
end;

function TReflectInvItem.GetQuantity: Integer;
begin
  Result := Reflect.Smart.GetFieldArrayInt(Self.Reference,
    Widget_StackSizes, Self._InvSlot - 1);
end;

function TReflectInvItem.GetId: Integer;
begin
  Result := Self._Id;
end;

function TReflectInvItem.GetInvSlot: Integer;
begin
  Result := Self._InvSlot;
end;

procedure TReflectInvItemArray.GetAll;
var
  I, TheId, TheQuantity, Count: Integer;
  InvWidget: TReflectWidget;
begin
  Reflect.Mem.FreeObjects(ckInvItems, True);
  InvWidget.GetWidget(WIDGET_Inventory_Container, 0);
  HookCache[ckInvItems][0] := InvWidget.Reference;
  for I := 0 to 27 do
  begin
    TheId := Reflect.Smart.GetFieldArrayInt(
      InvWidget.Reference, Widget_InvIDs, I);
    if (TheId > 0) then
    begin
      Inc(Count);
      SetLength(Self, Count);
      TheQuantity
      with Self[Count - 1] do
      begin
        Reference := InvWidget.Reference;
        _Id := TheId - 1;
        _InvSlot := I + 1;
      end;
    end;
  end;
end;

procedure TReflectInvItemArray.Get(Name: string);
var
  Temp, Temp1: TReflectInvItemArray;
  I, H, T: integer;
begin
  Temp.GetAll;
  if Length(Temp) = 0 then
    Exit;
  H := High(Temp);
  SetLength(Temp1, H + 1);
  for I := 0 to H do
  begin
    if (Temp[I].GetName = Name) then
    begin
      Temp1[T] := Temp[I];
      Inc(T);
    end;
  end;
  Setlength(Temp1, T);
  Self := Temp1;
end;

procedure TReflectInvItemArray.Get(Id: Integer); overload;
var
  Temp, Temp1: TReflectInvItemArray;
  I, H, T: Integer;
begin
  Temp.GetAll;
  if Length(Temp) = 0 then
    Exit;
  H := High(Temp);
  SetLength(Temp1, H + 1);
  for I := 0 to H do
  begin
    if (Temp[I].GetId = Id) then
    begin
      Temp1[T] := Temp[I];
      Inc(T);
    end;
  end;
  Setlength(Temp1, T);
  Self := Temp1;
end;

function TReflectInvItem.Find(Name: string): Boolean;
var
  Temp: TReflectInvItemArray;
begin
  Temp.Get(Name);
  if Length(Temp) = 0 then
    Exit;
  Result := True;
  Self := Temp[0];
end;

function TReflectInvItem.Find(Id: Integer): Boolean; overload;
var
  Temp: TReflectInvItemArray;
begin
  Temp.Get(Id);
  if Length(Temp) = 0 then
    Exit;
  Result := True;
  Self := Temp[0];
end;

function TReflectInvItem.GetBox: TBox;
var
  Slot1, Slot6: TBox;
begin
  if not InRange(Self._InvSlot, 1, 28) then
    Exit;
  Slot1 := [563, 213, 594, 244];
  Slot6 := [605, 249, 31415, 92653];
  Result.X1 := Slot1.X1 + ((((Self._InvSlot + 3) mod 4)) * (Slot6.X1 - Slot1.X1));
  Result.Y1 := Slot1.Y1 + ((((Self._InvSlot - 1) div 4)) * (Slot6.Y1 - Slot1.Y1));
  Result.X2 := Result.X1 + (Slot1.X2 - Slot1.X1);
  Result.Y2 := Result.Y1 + (Slot1.Y2 - Slot1.Y1);
end;

function TReflectInvItem.GetPoint: TPoint;
var
  Temp: TPoint;
begin
  if not InRange(Self._InvSlot, 1, 28) then
    Exit;
  Reflect.Math.GaussBox(Temp.X, Temp.Y, Self.GetBox.X1, Self.GetBox.Y1,
    Self.GetBox.X2, Self.GetBox.Y2);
  Result := Temp;
end;

function TReflectInvItem.GetMSPoint: TPoint;
begin
  if not InRange(Self._InvSlot, 1, 28) then
    Exit;
  Reflect.Logger.Warn('Please Replace TReflectInvItem.GetMSPoint with TReflectInvItem.GetPoint');
  Result := Self.GetPoint;
end;

function TReflectInvItem.Hover(RanX, RanY: Integer = 0): Boolean;
begin
  if not InRange(Self._InvSlot, 1, 28) then
    Exit;

  Reflect.Mouse.Move(Self.GetMSPoint, RanX, RanY);
  Result := True;
end;

function TReflectInvItem.Click(Button: Integer; RanX, RanY: Integer = 0): Boolean;
begin
  if not InRange(Self._InvSlot, 1, 28) then
    Exit;

  Reflect.Mouse.Move(Self.GetMSPoint, RanX, RanY, Button);
  Result := True;
end;

function TReflectInvItem.ChooseOption(Option: String): Boolean;
begin
  if not InRange(Self._InvSlot, 1, 28) then
    Exit;
    
  Self.Hover(5, 5);

  if Reflect.Text.IsUpText(Option, 50) then
  begin
    Reflect.Mouse.Click(MOUSE_LEFT);
    Wait(RandomRange(120, 180));
    Result := True;
    Exit;
  end;

  Self.Click(MOUSE_RIGHT, 5, 5);
  Result := Reflect.Text.ChooseOption(Option);
end;

function TReflectInvItem.Use: Boolean;
begin
  Result := Self.ChooseOption('Use ' + Self.GetName);
end;

function TReflectInvItem.Drop: Boolean;
begin
  Result := Self.ChooseOption('Drop ' + Self.GetName);
end;

function TReflectionInventory.Count: Integer;
var
  I: Integer;
  _Items: TReflectInvItemArray;
begin
  _Items.GetAll;
  Result := Length(_Items);
end;

function TReflectionInventory.WaitChange(MaxTime: Integer): Boolean;
var
  T: TReflectTimer;
  Count: Integer;
begin
  Count := Self.Count;
  T.Start;
  while T.ElapsedTime < MaxTime do
    if Self.Count <> Count then
      Exit(True);
end;

function TReflectionInventory.IsFull: Boolean;
begin
  Result := Reflect.Inv.Count = 28;
end;

function TReflectionInventory.IsEmpty: Boolean;
begin
  Result := Reflect.Inv.Count = 0;
end;

function TReflectionInventory.Contains(TheItem: TStringArray): Boolean;
var
  _Item: TReflectInvItem;
  I: Integer;
begin
  for I := 0 to High(TheItem) do
  begin
    if _Item.Find(TheItem[I]) then
      Exit(True);
  end;
end;

function TReflectionInventory.Contains(
  TheItem: TIntegerArray): Boolean; overload;
var
  _Item: TReflectInvItem;
  I: Integer;
begin
  for I := 0 to High(TheItem) do
  begin
    if _Item.Find(TheItem[I]) then
      Exit(True);
  end;
end;

function TReflectionInventory.Drop(Item: Integer): Boolean;
var
  Temp: TReflectInvItem;
begin
  if Temp.Find(Item) then
  begin
    Reflect.Mouse.Move(Temp.GetPoint, 2, 2);
    Wait(RandomRange(160, 250));
    Reflect.Mouse.Click(Mouse_Right);
    Result := Reflect.Text.ChooseOption('Drop');
  end;
end;

function TReflectionInventory.Drop(Item: string): Boolean; overload;
var
  Temp: TReflectInvItem;
begin
  if Temp.Find(Item) then
  begin
    Reflect.Mouse.Move(Temp.GetPoint, 2, 2);
    Wait(RandomRange(160, 250));
    Reflect.Mouse.Click(Mouse_Right);
    Result := Reflect.Text.ChooseOption('Drop');
  end;
end;

procedure TReflectionInventory.DropAll;
var
  Temp: TReflectInvItemArray;
  ItemCount, I: Integer;
begin
  Temp.GetAll;
  ItemCount := Length(Temp);
  for I := 0 to ItemCount do
    Self.Drop(Temp[I]._Id);
end;

procedure TReflectInvItemArray.Drop;
var
  ItemCount, I: Integer;
begin
  ItemCount := Length(Self);
  for I := 0 to ItemCount do
    Reflect.Inv.Drop(Self[I]._Id);
end;
