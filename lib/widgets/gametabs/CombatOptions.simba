
procedure TReflectionGametab.Retaliate(TurnOn: Boolean);
var
  RetaliateWidget: TReflectWidget;
  OnOff: string;
begin
  RetaliateWidget.GetWidget(Widget_CombatOptions_Container, Widget_CombatOptions_Retaliate_Child);
  OnOff := Between('(', ')', RetaliateWidget.GetText);
  case TurnOn of
    True:
    begin
      if OnOff = 'Off' then
      begin
        if Reflect.Gametab.Open(Gametab_CombatOptions) then
          RetaliateWidget.Interact;
      end;
    end;
    False:
    begin
      if OnOff = 'On' then
      begin
        if Reflect.Gametab.Open(Gametab_CombatOptions) then
          RetaliateWidget.Interact;
      end;
    end;
  end;
  RetaliateWidget.Free;
end;

procedure TReflectionGametab.ChooseAttackStyle(AttackStyle: string);
var
  StyleWidget: TReflectWidget;
  I: Integer;
begin
  if not Reflect.Gametab.Open(Gametab_CombatOptions) then
    exit;

  for I := 0 to High(Widget_CombatOptions_Options_Children) do
  begin
    StyleWidget.GetWidget(Widget_CombatOptions_Container, Widget_CombatOptions_Options_Children[I]);
    if AttackStyle = StyleWidget.GetText then
    begin
      StyleWidget.Interact;
      StyleWidget.Free;
      Exit;
    end;
    StyleWidget.Free;
  end;
  Reflect.Logger.Warn('%s is not a valid AttackStyle.', [AttackStyle]);
end;

function TReflectionGametab.GetWieldedWeapon: string;
var
  WeaponWidget: TReflectWidget;
begin
  WeaponWidget.GetWidget(Widget_CombatOptions_Container, Widget_CombatOptions_WieldedWeapon_Child);
  Result := WeaponWidget.GetText;
  WeaponWidget.Free;
end;

function TReflectionGametab.GetCombatString: string;
var
  CombatWidget: TReflectWidget;
begin
  CombatWidget.GetWidget(Widget_CombatOptions_Container, Widget_CombatOptions_Combat_Child);
  Result := CombatWidget.GetText;
  CombatWidget.Free;
end;

