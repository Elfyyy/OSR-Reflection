
{$IFNDEF CODEINSIGHT}
procedure TReflectWornEquipment._GetAt(Slot : Integer);
var
  EquipmentWidget, EquipmentChild: TReflectWidget;
begin
  EquipmentWidget.GetWidget(Widget_WornEquipment_Container, Slot);
  EquipmentChild.GetChild(EquipmentWidget, Widget_WornEquipment_Items_Child_Container);

  with Self do
  begin
    _Id := EquipmentChild.GetItemId;
    _Quantity := EquipmentChild.GetItemStackSizes;
    _EquipSlot := Slot;
    _Box := EquipmentWidget.GetBounds;
  end;

  EquipmentChild.Free;
  EquipmentWidget.Free;
end;
{$ENDIF}

function TReflectWornEquipment.GetId: Integer;
begin
  Result := Self._Id;
end;

function TReflectWornEquipment.GetQuantity: Integer;
begin
  Result := Self._Quantity;
end;

function TReflectWornEquipment.GetEquipSlot: Integer;
begin
  Result := Self._EquipSlot;
end;

function TReflectWornEquipment.GetSlot: Integer;
begin
  Result := Self._EquipSlot;
end;

function TReflectWornEquipment.GetBox: TBox;
begin
  Result := Self._Box;
end;

function TReflectWornEquipment.GetName: string;
var
  Line: string;
  Id: Integer;
begin
  Id := Self.GetId;
  if not InRange(Id, 0, Definition_Items_Length) then
    Exit;
  Line := ItemCache.GetStrings(Id);
  Result := Between('''name'': ''', ''',', Line);
end;

procedure TReflectWornEquipment.AtSlot(Slot: Integer);
begin
  if not InRange(Slot, WornEquipment_Helmet, WornEquipment_Quiver) then
  begin
    Reflect.Logger.Warn('%d is not a valid worn equipment slot', [Slot]);
    Exit;
  end;
  if not Reflect.Gametab.Open(GameTab_WornEquipment) then
    exit;

  Self._GetAt(Slot);
end;

procedure TReflectWornEquipmentArray.GetAll(IncludeEmpty : Boolean = False);
var
  I, Count: Integer;
  Temp : TReflectWornEquipment;
begin
  Self := [];
  if not Reflect.Gametab.Open(GameTab_WornEquipment) then
    exit;

  SetLength(Self, 11);
  for I := WornEquipment_Helmet to WornEquipment_Quiver do
  begin
    Temp._GetAt(I);
    if (Temp.GetId <> -1) or IncludeEmpty then
    begin
      Self[Count] := Temp;
      Inc(Count);
    end;
  end;

  SetLength(Self, Count);
end;

procedure TReflectionGametab.RemoveWornEquipment(Slot: Integer);
var
  Temp : TReflectWornEquipment;
begin
  if not InRange(Slot, WornEquipment_Helmet, WornEquipment_Quiver) then
  begin
    Reflect.Logger.Warn('%d is not a valid worn equipment slot', [Slot]);
    Exit;
  end;
  if not Reflect.Gametab.Open(GameTab_WornEquipment) then
    exit;

  Temp._GetAt(Slot);
  if Temp.GetId <> -1 then
    Reflect.Mouse.Move(Temp.GetBox, Mouse_Left);
end;

procedure TReflectWornEquipment.Remove;
begin
  Reflect.Gametab.RemoveWornEquipment(Self.GetEquipSlot);
end;

