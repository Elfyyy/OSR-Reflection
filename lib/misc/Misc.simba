function TReflectionMisc.GetSettingArray: TIntegerArray;
var
  I: Integer;
begin
  SetLength(Result, 2000);
  for I := 0 to 1999 do
    Result[I] := Reflect.Smart.GetFieldArrayInt(0, Client_GameSettings, I)
end;

function TReflectionMisc.GetSetting(Setting: Integer): Integer;
var
  SettingArray: TIntegerArray;
begin
  SettingArray := Reflect.Misc.GetSettingArray;
  if(Setting < Length(SettingArray))then
    Result := SettingArray[Setting]
  else
  begin
    Reflect.Logger.Warn('Incorrect setting index passed to GetSetting');
    Result := -1;
  end;
end;

function TReflectionMisc.GetClientLoopCycle: Integer;
begin
  result := Reflect.Smart.GetFieldInt(0, Client_LoopCycle);
end;

function TReflectionMisc.BaseX: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(0, Client_BaseX);
end;

function TReflectionMisc.BaseY: Integer;
begin
  Result := Reflect.Smart.GetFieldInt(0, Client_BaseY);
end;

function TReflectionMisc.VariantIsInteger(const V: Variant): Boolean;
begin
  case VarType(V) of
    VarByte, VarShortInt, VarSmallInt, VarWord, VarInteger, VarLongWord,
      VarInt64: Result := True;
    else
      Result := False;
  end;
end;

function TReflectionMisc.VariantIsFloat(const V: Variant): Boolean;
begin
  case VarType(V) of
    VarCurrency, VarSingle, VarDouble: Result := True;
    else
      Result := False;
  end;
end;

function TReflectionMisc.VariantIsNumber(const v: Variant): Boolean;
begin
  Result := VariantIsInteger(V) or VariantIsFloat(v);
end;

function TReflectionMisc.VariantIsString(const v: Variant): Boolean;
begin
  case VarType(V) of
    VarOleStr, VarString: Result := True;
    else
      Result := False;
  end;
end;

function TReflectionMisc.VariantIsBoolean(const V: Variant): Boolean;
begin
  Result := VarType(v) = VarBoolean;
end;

{$loadlib prosocks}
Function TReflectionMisc.GetPage(Url: string): string;
var
  S: SSLSocket;
  Res: ProMemoryStruct;
begin
  Pro_InitSocket(S, nil, nil, nil, nil);
  Pro_CreateSocket(S, '');
  Pro_SetSSL(S, false, false, true);
  Pro_SetURL(S, URL);
  Pro_DoGetEx(S, Res);
  SetLength(Result, Res.size);
  MemMove(Res.Memory^, Result[1], Res.Size);
  Pro_FreeSocket(S);
end;

function TReflectionMisc.Time(): string;
var
  I: Integer;
  TimeInts: array[0..3] of UInt16;
begin
  DecodeTime(Now(), TimeInts[0], TimeInts[1], TimeInts[2], TimeInts[3]);
  for I := 0 to High(TimeInts) do
    if I = High(TimeInts) then
      Result += PadZ(IntToStr(TimeInts[I]), 3)
    else
      Result += PadZ(IntToStr(TimeInts[I]), 2) + ':';
end;
